
REFERENCE ASSEMBLY [GHInsights.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];

@Commit =
SELECT	 GHInsights.USql.Utility.GetString(Data, "sha") AS CommitSha
		,GHInsights.USql.Utility.GetInteger(Data, "author.id") AS AuthorId
		,GHInsights.USql.Utility.GetString(Data, "author.login") AS AuthorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "author.site_admin") AS AuthorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "author.type") AS AuthorType
		,GHInsights.USql.Utility.GetDateTime(Data, "commit.author.date") AS CommitAuthorDate
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.author.email") AS CommitAuthorEmail
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.author.name") AS CommitAuthorName
		,GHInsights.USql.Utility.GetInteger(Data, "commit.comment_count") AS CommitCommentCount
		,GHInsights.USql.Utility.GetDateTime(Data, "commit.committer.date") AS CommitCommitterDate
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.committer.email") AS CommitCommitterEmail
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.committer.name") AS CommitCommitterName
		,GHInsights.USql.Utility.GetUSqlString(Data, "commit.message") AS CommitMessage
		,GHInsights.USql.Utility.GetString(Data, "commit.tree.sha") AS CommitTreeSha
		,GHInsights.USql.Utility.GetInteger(Data, "committer.id") AS CommitterId
		,GHInsights.USql.Utility.GetString(Data, "committer.login") AS CommitterLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "committer.site_admin") AS CommitterSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "committer.type") AS CommitterType
		,GHInsights.USql.Utility.GetInteger(Data, "stats.additions") AS StatsAdditions
		,GHInsights.USql.Utility.GetInteger(Data, "stats.deletions") AS StatsDeletions
		,GHInsights.USql.Utility.GetInteger(Data, "stats.total") AS StatsTotal
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "commits";

@CommitDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY CommitSha ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Commit;

DROP TABLE IF EXISTS dbo.Commit;

CREATE TABLE dbo.Commit
(
    INDEX IX_Commit
    CLUSTERED(CommitSha)
    PARTITIONED BY
    HASH(CommitSha, CommitAuthorDate)
    INTO 60
)
AS
SELECT   CommitSha
		,AuthorId
		,AuthorLogin
		,AuthorSiteAdmin
		,AuthorType
		,CommitAuthorDate
        ,CommitAuthorEmail
		,CommitAuthorName
		,CommitCommentCount
		,CommitCommitterDate
        ,CommitCommitterEmail
		,CommitCommitterName
		,CommitMessage
		,CommitTreeSha
		,CommitterId
		,CommitterLogin
		,CommitterSiteAdmin
		,CommitterType
		,StatsAdditions
		,StatsDeletions
		,StatsTotal
		,EtlSourceId
        ,EtlIngestDate
FROM @CommitDeDupe
WHERE RowNumber == 1;
