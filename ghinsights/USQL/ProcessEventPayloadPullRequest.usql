
REFERENCE ASSEMBLY [GitHubAnalytics.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];

@Event =
SELECT	 GitHubAnalytics.USql.Utility.GetInteger(Data, "id") AS EventId
        ,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.id") AS EventPayloadPullRequestId
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.additions") AS Additions
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.assignee.id") AS AssigneeId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.assignee.login") AS AssigneeLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.assignee.site_admin") AS AssigneeSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.assignee.type") AS AssigneeType
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.label") AS BaseLabel
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.ref") AS BaseRef
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.base.repo.created_at") AS BaseRepoCreatedAt
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.default_branch") AS BaseRepoDefaultBranch
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.description") AS BaseRepoDescription
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.fork") AS BaseRepoFork
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.forks") AS BaseRepoForks
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.forks_count") AS BaseRepoForksCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.full_name") AS BaseRepoFullName
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_downloads") AS BaseRepoHasDownloads
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_issues") AS BaseRepoHasIssues
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_pages") AS BaseRepoHasPages
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_wiki") AS BaseRepoHasWiki
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.homepage") AS BaseRepoHomepage
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.id") AS BaseRepoId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.language") AS BaseRepoLanguage
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.name") AS BaseRepoName
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.open_issues") AS BaseRepoOpenIssues
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.open_issues_count") AS BaseRepoOpenIssuesCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.owner.id") AS BaseRepoOwnerId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.owner.login") AS BaseRepoOwnerLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.owner.site_admin") AS BaseRepoOwnerSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.repo.owner.type") AS BaseRepoOwnerType
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.private") AS BaseRepoPrivate
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.base.repo.pushed_at") AS BaseRepoPushedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.size") AS BaseRepoSize
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.stargazers_count") AS BaseRepoStargazersCount
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.base.repo.updated_at") AS BaseRepoUpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.watchers") AS BaseRepoWatchers
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.watchers_count") AS BaseRepoWatchersCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.sha") AS BaseSha
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.base.user.id") AS BaseUserId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.user.login") AS BaseUserLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.base.user.site_admin") AS BaseUserSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.base.user.type") AS BaseUserType
		,GitHubAnalytics.USql.Utility.GetUSqlString(Data, "payload.pull_request.body") AS Body
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.changed_files") AS ChangedFiles
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.closed_at") AS ClosedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.comments") AS Comments
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.commits") AS Commits
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.created_at") AS CreatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.deletions") AS Deletions
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.label") AS HeadLabel
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.ref") AS HeadRef
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.head.repo.created_at") AS HeadRepoCreatedAt
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.default_branch") AS HeadRepoDefaultBranch
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.description") AS HeadRepoDescription
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.fork") AS HeadRepoFork
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.forks") AS HeadRepoForks
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.forks_count") AS HeadRepoForksCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.full_name") AS HeadRepoFullName
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_downloads") AS HeadRepoHasDownloads
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_issues") AS HeadRepoHasIssues
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_pages") AS HeadRepoHasPages
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_wiki") AS HeadRepoHasWiki
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.homepage") AS HeadRepoHomepage
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.id") AS HeadRepoId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.language") AS HeadRepoLanguage
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.name") AS HeadRepoName
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.open_issues") AS HeadRepoOpenIssues
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.open_issues_count") AS HeadRepoOpenIssuesCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.owner.id") AS HeadRepoOwnerId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.owner.login") AS HeadRepoOwnerLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.owner.site_admin") AS HeadRepoOwnerSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.repo.owner.type") AS HeadRepoOwnerType
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.private") AS HeadRepoPrivate
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.head.repo.pushed_at") AS HeadRepoPushedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.size") AS HeadRepoSize
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.stargazers_count") AS HeadRepoStargazersCount
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.head.repo.updated_at") AS HeadRepoUpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.watchers") AS HeadRepoWatchers
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.watchers_count") AS HeadRepoWatchersCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.sha") AS HeadSha
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.head.user.id") AS HeadUserId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.user.login") AS HeadUserLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.head.user.site_admin") AS HeadUserSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.head.user.type") AS HeadUserType
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.locked") AS Locked
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.merge_commit_sha") AS MergeCommitSha
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.mergeable") AS Mergeable
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.mergeable_state") AS MergeableState
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.merged") AS Merged
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.merged_at") AS MergedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.merged_by.id") AS MergedById
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.merged_by.login") AS MergedByLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.merged_by.site_admin") AS MergedBySiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.merged_by.type") AS MergedByType
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.closed_at") AS MilestoneClosedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.closed_issues") AS MilestoneClosedIssues
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.created_at") AS MilestoneCreatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.creator.id") AS MilestoneCreatorId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.milestone.creator.login") AS MilestoneCreatorLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.milestone.creator.site_admin") AS MilestoneCreatorSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.milestone.creator.type") AS MilestoneCreatorType
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.milestone.description") AS MilestoneDescription
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.due_on") AS MilestoneDueOn
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.id") AS MilestoneId
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.number") AS MilestoneNumber
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.open_issues") AS MilestoneOpenIssues
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.milestone.state") AS MilestoneState
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.milestone.title") AS MilestoneTitle
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.updated_at") AS MilestoneUpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.number") AS Number
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.review_comments") AS ReviewComments
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.state") AS State
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.title") AS Title
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "payload.pull_request.updated_at") AS UpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "payload.pull_request.user.id") AS UserId
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.user.login") AS UserLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "payload.pull_request.user.site_admin") AS UserSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "payload.pull_request.user.type") AS UserType
		,GitHubAnalytics.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "events" AND Data["payload.pull_request.id"] IS NOT NULL;

@EventDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Event;

DROP TABLE IF EXISTS dbo.EventPayloadPullRequest;

CREATE TABLE dbo.EventPayloadPullRequest
(
    INDEX IX_EventPayloadPullRequest
    CLUSTERED(EventId)
    PARTITIONED BY
    HASH(EventId, EtlSourceId)
    INTO 60
)
AS
SELECT   EventId
		,EventPayloadPullRequestId
		,Additions
		,AssigneeId
		,AssigneeLogin
		,AssigneeSiteAdmin
		,AssigneeType
		,BaseLabel
		,BaseRef
		,BaseRepoCreatedAt
		,BaseRepoDefaultBranch
		,BaseRepoDescription
		,BaseRepoFork
		,BaseRepoForks
		,BaseRepoForksCount
		,BaseRepoFullName
		,BaseRepoHasDownloads
		,BaseRepoHasIssues
		,BaseRepoHasPages
		,BaseRepoHasWiki
		,BaseRepoHomepage
		,BaseRepoId
		,BaseRepoLanguage
		,BaseRepoName
		,BaseRepoOpenIssues
		,BaseRepoOpenIssuesCount
		,BaseRepoOwnerId
		,BaseRepoOwnerLogin
		,BaseRepoOwnerSiteAdmin
		,BaseRepoOwnerType
		,BaseRepoPrivate
		,BaseRepoPushedAt
		,BaseRepoSize
		,BaseRepoStargazersCount
		,BaseRepoUpdatedAt
		,BaseRepoWatchers
		,BaseRepoWatchersCount
		,BaseSha
		,BaseUserId
		,BaseUserLogin
		,BaseUserSiteAdmin
		,BaseUserType
		,Body
		,ChangedFiles
		,ClosedAt
		,Comments
		,Commits
		,CreatedAt
		,Deletions
		,HeadLabel
		,HeadRef
		,HeadRepoCreatedAt
		,HeadRepoDefaultBranch
		,HeadRepoDescription
		,HeadRepoFork
		,HeadRepoForks
		,HeadRepoForksCount
		,HeadRepoFullName
		,HeadRepoHasDownloads
		,HeadRepoHasIssues
		,HeadRepoHasPages
		,HeadRepoHasWiki
		,HeadRepoHomepage
		,HeadRepoId
		,HeadRepoLanguage
		,HeadRepoName
		,HeadRepoOpenIssues
		,HeadRepoOpenIssuesCount
		,HeadRepoOwnerId
		,HeadRepoOwnerLogin
		,HeadRepoOwnerSiteAdmin
		,HeadRepoOwnerType
		,HeadRepoPrivate
		,HeadRepoPushedAt
		,HeadRepoSize
		,HeadRepoStargazersCount
		,HeadRepoUpdatedAt
		,HeadRepoWatchers
		,HeadRepoWatchersCount
		,HeadSha
		,HeadUserId
		,HeadUserLogin
		,HeadUserSiteAdmin
		,HeadUserType
		,Locked
		,MergeCommitSha
		,Mergeable
		,MergeableState
		,Merged
		,MergedAt
		,MergedById
		,MergedByLogin
		,MergedBySiteAdmin
		,MergedByType
		,MilestoneClosedAt
		,MilestoneClosedIssues
		,MilestoneCreatedAt
		,MilestoneCreatorId
		,MilestoneCreatorLogin
		,MilestoneCreatorSiteAdmin
		,MilestoneCreatorType
		,MilestoneDescription
		,MilestoneDueOn
		,MilestoneId
		,MilestoneNumber
		,MilestoneOpenIssues
		,MilestoneState
		,MilestoneTitle
		,MilestoneUpdatedAt
		,Number
		,ReviewComments
		,State
		,Title
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @EventDeDupe
WHERE RowNumber == 1;
