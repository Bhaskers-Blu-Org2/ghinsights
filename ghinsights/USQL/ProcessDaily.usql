
DROP PROCEDURE IF EXISTS GHInsights.dbo.ProcessDaily;

CREATE PROCEDURE GHInsights.dbo.ProcessDaily (@Year string, @Month string, @Day string)
AS
BEGIN

USE GHInsights;
    
REFERENCE ASSEMBLY [GHInsights.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];

DECLARE @IngestDate = DateTime.Parse(string.Format("{0:D4}-{1:D2}-{2:D3}", @Year, @Month, @Day), null, DateTimeStyles.AssumeUniversal).ToUniversalTime();
DECLARE @IngestDatePartition = @IngestDate.ToString("yyyy-MM-dd");

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process Commit
//  60

@NewRawCommit =
SELECT   GHInsights.USql.Utility.GetString(Data, "sha") AS CommitSha 
        ,Data
        ,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
        FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "commits"
AND   IngestDate == @IngestDatePartition;

@NewCommit =
SELECT	 CommitSha
        ,GHInsights.USql.Utility.GetString(Data, "url") AS Url
		,GHInsights.USql.Utility.GetInteger(Data, "author.id") AS AuthorId
		,GHInsights.USql.Utility.GetString(Data, "author.login") AS AuthorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "author.site_admin") AS AuthorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "author.type") AS AuthorType
		,GHInsights.USql.Utility.GetDateTime(Data, "commit.author.date") AS CommitAuthorDate
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.author.email") AS CommitAuthorEmail
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.author.name") AS CommitAuthorName
		,GHInsights.USql.Utility.GetInteger(Data, "commit.comment_count") AS CommitCommentCount
		,GHInsights.USql.Utility.GetDateTime(Data, "commit.committer.date") AS CommitCommitterDate
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.committer.email") AS CommitCommitterEmail
        ,GHInsights.USql.Utility.GetPiiString(Data, "commit.committer.name") AS CommitCommitterName
		,GHInsights.USql.Utility.GetUSqlString(Data, "commit.message") AS CommitMessage
		,GHInsights.USql.Utility.GetString(Data, "commit.tree.sha") AS CommitTreeSha
		,GHInsights.USql.Utility.GetInteger(Data, "committer.id") AS CommitterId
		,GHInsights.USql.Utility.GetString(Data, "committer.login") AS CommitterLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "committer.site_admin") AS CommitterSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "committer.type") AS CommitterType
		,GHInsights.USql.Utility.GetInteger(Data, "stats.additions") AS StatsAdditions
		,GHInsights.USql.Utility.GetInteger(Data, "stats.deletions") AS StatsDeletions
		,GHInsights.USql.Utility.GetInteger(Data, "stats.total") AS StatsTotal
		,EtlSourceId
        ,EtlIngestDate
FROM @NewRawCommit AS e;

@Commit =
    SELECT *
    FROM dbo.Commit
        UNION ALL
    SELECT *
    FROM @NewCommit;

@CommitDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY CommitSha ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Commit;

TRUNCATE TABLE dbo.Commit;

INSERT dbo.Commit
SELECT   CommitSha
        ,Url
		,AuthorId
		,AuthorLogin
		,AuthorSiteAdmin
		,AuthorType
		,CommitAuthorDate
        ,CommitAuthorEmail
		,CommitAuthorName
		,CommitCommentCount
		,CommitCommitterDate
        ,CommitCommitterEmail
		,CommitCommitterName
		,CommitMessage
		,CommitTreeSha
		,CommitterId
		,CommitterLogin
		,CommitterSiteAdmin
		,CommitterType
		,StatsAdditions
		,StatsDeletions
		,StatsTotal
		,EtlSourceId
        ,EtlIngestDate
FROM @CommitDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process CommitFile
//  400

@CommitFileExplode =
SELECT	 EtlIngestDate
        ,CommitSha
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS CommitFileId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,EtlSourceId
FROM @NewRawCommit AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("files[");

@CommitFilePrePivot =
SELECT	 EtlIngestDate
        ,CommitSha
        ,CommitFileId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,EtlSourceId
FROM @CommitFileExplode AS e
GROUP BY EtlIngestDate, CommitSha, CommitFileId, EtlSourceId;

@CommitFile =
SELECT   CommitSha
        ,CommitFileId
        ,GHInsights.USql.Utility.GetString(Data, "sha") AS CommitFileSha
		,GHInsights.USql.Utility.GetInteger(Data, "additions") AS Additions
		,GHInsights.USql.Utility.GetInteger(Data, "changes") AS Changes
		,GHInsights.USql.Utility.GetInteger(Data, "deletions") AS Deletions
		,GHInsights.USql.Utility.GetString(Data, "filename") AS Filename
		,GHInsights.USql.Utility.GetUSqlString(Data, "patch") AS Patch
		,GHInsights.USql.Utility.GetString(Data, "previous_filename") AS PreviousFilename
		,GHInsights.USql.Utility.GetString(Data, "status") AS Status
        ,EtlSourceId
        ,EtlIngestDate
FROM @CommitFilePrePivot AS e;

INSERT dbo.CommitFile
SELECT   CommitSha
        ,CommitFileId
        ,CommitFileSha
		,Additions
		,Changes
		,Deletions
		,Filename
		,Patch
		,PreviousFilename
		,Status
        ,EtlSourceId
        ,EtlIngestDate
FROM @CommitFile;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process CommitParent
//  20

@NewCommitParentExplode =
SELECT	 EtlIngestDate
        ,CommitSha
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS CommitParentId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,EtlSourceId
FROM @NewRawCommit AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("parents[");

@NewCommitParentPrePivot =
SELECT	 EtlIngestDate
        ,CommitSha
        ,CommitParentId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,EtlSourceId
FROM @NewCommitParentExplode AS e
GROUP BY EtlIngestDate, CommitSha, CommitParentId, EtlSourceId;

@NewCommitParent =
SELECT   CommitSha
        ,CommitParentId
        ,GHInsights.USql.Utility.GetString(Data, "sha") AS CommitParentSha
        ,EtlSourceId
        ,EtlIngestDate
FROM @NewCommitParentPrePivot AS e;
    
@CommitParent =
    SELECT *
    FROM dbo.CommitParent
        UNION ALL
    SELECT *
    FROM @NewCommitParent;
    
@CommitParentDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY CommitSha, CommitParentSha ORDER BY EtlSourceId DESC) AS RowNumber
FROM @CommitParent;

TRUNCATE TABLE dbo.CommitParent;

INSERT dbo.CommitParent
SELECT   CommitSha
        ,CommitParentId
        ,CommitParentSha
        ,EtlSourceId
        ,EtlIngestDate
FROM @CommitParentDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process CommitComment
//  2

@NewCommitComment =
SELECT	 GHInsights.USql.Utility.GetString(Data, "commit_id") AS CommitSha
		,(int)GHInsights.USql.Utility.GetInteger(Data, "id") AS CommitCommentId
		,GHInsights.USql.Utility.GetUSqlString(Data, "body") AS Body
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "line") AS Line
		,GHInsights.USql.Utility.GetString(Data, "path") AS Path
		,GHInsights.USql.Utility.GetInteger(Data, "position") AS Position
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "user.id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "user.login") AS UserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "user.site_admin") AS UserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "user.type") AS UserType
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "commit_comments"
AND   IngestDate == @IngestDatePartition;
    
@CommitComment =
    SELECT *
    FROM dbo.CommitComment
        UNION ALL
    SELECT *
    FROM @NewCommitComment;

@CommitCommentDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY  CommitCommentId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @CommitComment;

TRUNCATE TABLE dbo.CommitComment;

INSERT dbo.CommitComment
SELECT   CommitSha
		,CommitCommentId
		,Body
		,CreatedAt
		,Line
		,Path
		,Position
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @CommitCommentDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process Event
//  60

@NewRawEvent =
SELECT   GHInsights.USql.Utility.GetString(Data, "id") AS EventId 
        ,Data
        ,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
        FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "events"
AND   IngestDate == @IngestDatePartition;

@NewEvent =
SELECT	 EventId
		,GHInsights.USql.Utility.GetInteger(Data, "actor.id") AS ActorId
		,GHInsights.USql.Utility.GetString(Data, "actor.login") AS ActorLogin
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "org.id") AS OrgId
		,GHInsights.USql.Utility.GetString(Data, "org.login") AS OrgLogin
		,GHInsights.USql.Utility.GetString(Data, "payload.action") AS PayloadAction
		,GHInsights.USql.Utility.GetString(Data, "payload.before") AS PayloadBefore
		,GHInsights.USql.Utility.GetString(Data, "payload.comment._links.html.href") AS PayloadCommentLinksHtmlHref
		,GHInsights.USql.Utility.GetString(Data, "payload.comment._links.pull_request.href") AS PayloadCommentLinksPullRequestHref
		,GHInsights.USql.Utility.GetString(Data, "payload.comment._links.self.href") AS PayloadCommentLinksSelfHref
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.comment.body") AS PayloadCommentBody
		,GHInsights.USql.Utility.GetString(Data, "payload.comment.commit_id") AS PayloadCommentCommitId
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.comment.created_at") AS PayloadCommentCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "payload.comment.diff_hunk") AS PayloadCommentDiffHunk
		,GHInsights.USql.Utility.GetInteger(Data, "payload.comment.id") AS PayloadCommentId
		,GHInsights.USql.Utility.GetInteger(Data, "payload.comment.line") AS PayloadCommentLine
		,GHInsights.USql.Utility.GetString(Data, "payload.comment.original_commit_id") AS PayloadCommentOriginalCommitId
		,GHInsights.USql.Utility.GetInteger(Data, "payload.comment.original_position") AS PayloadCommentOriginalPosition
		,GHInsights.USql.Utility.GetString(Data, "payload.comment.path") AS PayloadCommentPath
		,GHInsights.USql.Utility.GetInteger(Data, "payload.comment.position") AS PayloadCommentPosition
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.comment.updated_at") AS PayloadCommentUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.comment.user.id") AS PayloadCommentUserId
		,GHInsights.USql.Utility.GetString(Data, "payload.comment.user.login") AS PayloadCommentUserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.comment.user.site_admin") AS PayloadCommentUserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.comment.user.type") AS PayloadCommentUserType
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.description") AS PayloadDescription
		,GHInsights.USql.Utility.GetInteger(Data, "payload.distinct_size") AS PayloadDistinctSize
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.forkee.created_at") AS PayloadForkeeCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.default_branch") AS PayloadForkeeDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.forkee.description") AS PayloadForkeeDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.fork") AS PayloadForkeeFork
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.forks") AS PayloadForkeeForks
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.forks_count") AS PayloadForkeeForksCount
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.full_name") AS PayloadForkeeFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.has_downloads") AS PayloadForkeeHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.has_issues") AS PayloadForkeeHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.has_pages") AS PayloadForkeeHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.has_wiki") AS PayloadForkeeHasWiki
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.homepage") AS PayloadForkeeHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.id") AS PayloadForkeeId
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.language") AS PayloadForkeeLanguage
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.name") AS PayloadForkeeName
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.open_issues") AS PayloadForkeeOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.open_issues_count") AS PayloadForkeeOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.owner.id") AS PayloadForkeeOwnerId
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.owner.login") AS PayloadForkeeOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.owner.site_admin") AS PayloadForkeeOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.forkee.owner.type") AS PayloadForkeeOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.private") AS PayloadForkeePrivate
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.forkee.public") AS PayloadForkeePublic
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.forkee.pushed_at") AS PayloadForkeePushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.size") AS PayloadForkeeSize
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.stargazers_count") AS PayloadForkeeStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.forkee.updated_at") AS PayloadForkeeUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.watchers") AS PayloadForkeeWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "payload.forkee.watchers_count") AS PayloadForkeeWatchersCount
		,GHInsights.USql.Utility.GetString(Data, "payload.head") AS PayloadHead
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.assignee.id") AS PayloadIssueAssigneeId
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.assignee.login") AS PayloadIssueAssigneeLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.issue.assignee.site_admin") AS PayloadIssueAssigneeSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.assignee.type") AS PayloadIssueAssigneeType
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.issue.body") AS PayloadIssueBody
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.closed_at") AS PayloadIssueClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.comments") AS PayloadIssueComments
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.created_at") AS PayloadIssueCreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.id") AS PayloadIssueId
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.issue.locked") AS PayloadIssueLocked
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.milestone.closed_at") AS PayloadIssueMilestoneClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.milestone.closed_issues") AS PayloadIssueMilestoneClosedIssues
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.milestone.created_at") AS PayloadIssueMilestoneCreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.milestone.creator.id") AS PayloadIssueMilestoneCreatorId
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.milestone.creator.login") AS PayloadIssueMilestoneCreatorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.issue.milestone.creator.site_admin") AS PayloadIssueMilestoneCreatorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.milestone.creator.type") AS PayloadIssueMilestoneCreatorType
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.issue.milestone.description") AS PayloadIssueMilestoneDescription
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.milestone.due_on") AS PayloadIssueMilestoneDueOn
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.milestone.id") AS PayloadIssueMilestoneId
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.milestone.number") AS PayloadIssueMilestoneNumber
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.milestone.open_issues") AS PayloadIssueMilestoneOpenIssues
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.milestone.state") AS PayloadIssueMilestoneState
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.milestone.title") AS PayloadIssueMilestoneTitle
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.milestone.updated_at") AS PayloadIssueMilestoneUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.number") AS PayloadIssueNumber
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.state") AS PayloadIssueState
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.title") AS PayloadIssueTitle
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.issue.updated_at") AS PayloadIssueUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.issue.user.id") AS PayloadIssueUserId
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.user.login") AS PayloadIssueUserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.issue.user.site_admin") AS PayloadIssueUserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.issue.user.type") AS PayloadIssueUserType
		,GHInsights.USql.Utility.GetString(Data, "payload.master_branch") AS PayloadMasterBranch
		,GHInsights.USql.Utility.GetInteger(Data, "payload.member.id") AS PayloadMemberId
		,GHInsights.USql.Utility.GetString(Data, "payload.member.login") AS PayloadMemberLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.member.site_admin") AS PayloadMemberSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.member.type") AS PayloadMemberType
		,GHInsights.USql.Utility.GetInteger(Data, "payload.number") AS PayloadNumber
		,GHInsights.USql.Utility.GetInteger(Data, "payload.push_id") AS PayloadPushId
		,GHInsights.USql.Utility.GetString(Data, "payload.pusher_type") AS PayloadPusherType
		,GHInsights.USql.Utility.GetString(Data, "payload.ref") AS PayloadRef
		,GHInsights.USql.Utility.GetString(Data, "payload.ref_type") AS PayloadRefType
		,GHInsights.USql.Utility.GetInteger(Data, "payload.release.author.id") AS PayloadReleaseAuthorId
		,GHInsights.USql.Utility.GetString(Data, "payload.release.author.login") AS PayloadReleaseAuthorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.release.author.site_admin") AS PayloadReleaseAuthorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.release.author.type") AS PayloadReleaseAuthorType
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.release.body") AS PayloadReleaseBody
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.release.created_at") AS PayloadReleaseCreatedAt
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.release.draft") AS PayloadReleaseDraft
		,GHInsights.USql.Utility.GetInteger(Data, "payload.release.id") AS PayloadReleaseId
		,GHInsights.USql.Utility.GetString(Data, "payload.release.name") AS PayloadReleaseName
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.release.prerelease") AS PayloadReleasePrerelease
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.release.published_at") AS PayloadReleasePublishedAt
		,GHInsights.USql.Utility.GetString(Data, "payload.release.tag_name") AS PayloadReleaseTagName
		,GHInsights.USql.Utility.GetString(Data, "payload.release.target_commitish") AS PayloadReleaseTargetCommitish
		,GHInsights.USql.Utility.GetInteger(Data, "payload.size") AS PayloadSize
		,GHInsights.USql.Utility.GetBoolean(Data, "public") AS IsPublic
		,GHInsights.USql.Utility.GetInteger(Data, "repo.id") AS RepoId
		,GHInsights.USql.Utility.GetString(Data, "repo.name") AS RepoName
		,GHInsights.USql.Utility.GetString(Data, "type") AS Type
		,EtlSourceId
        ,EtlIngestDate
FROM @NewRawEvent AS e;

@Event =
    SELECT *
    FROM dbo.Event
        UNION ALL
    SELECT *
    FROM @NewEvent;

@EventDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Event;

TRUNCATE TABLE dbo.Event;
    
INSERT dbo.Event
SELECT   EventId
		,ActorId
		,ActorLogin
		,CreatedAt
		,OrgId
		,OrgLogin
		,PayloadAction
		,PayloadBefore
		,PayloadCommentLinksHtmlHref
		,PayloadCommentLinksPullRequestHref
		,PayloadCommentLinksSelfHref
		,PayloadCommentBody
		,PayloadCommentCommitId
		,PayloadCommentCreatedAt
		,PayloadCommentDiffHunk
		,PayloadCommentId
		,PayloadCommentLine
		,PayloadCommentOriginalCommitId
		,PayloadCommentOriginalPosition
		,PayloadCommentPath
		,PayloadCommentPosition
		,PayloadCommentUpdatedAt
		,PayloadCommentUserId
		,PayloadCommentUserLogin
		,PayloadCommentUserSiteAdmin
		,PayloadCommentUserType
		,PayloadDescription
		,PayloadDistinctSize
		,PayloadForkeeCreatedAt
		,PayloadForkeeDefaultBranch
		,PayloadForkeeDescription
		,PayloadForkeeFork
		,PayloadForkeeForks
		,PayloadForkeeForksCount
		,PayloadForkeeFullName
		,PayloadForkeeHasDownloads
		,PayloadForkeeHasIssues
		,PayloadForkeeHasPages
		,PayloadForkeeHasWiki
		,PayloadForkeeHomepage
		,PayloadForkeeId
		,PayloadForkeeLanguage
		,PayloadForkeeName
		,PayloadForkeeOpenIssues
		,PayloadForkeeOpenIssuesCount
		,PayloadForkeeOwnerId
		,PayloadForkeeOwnerLogin
		,PayloadForkeeOwnerSiteAdmin
		,PayloadForkeeOwnerType
		,PayloadForkeePrivate
		,PayloadForkeePublic
		,PayloadForkeePushedAt
		,PayloadForkeeSize
		,PayloadForkeeStargazersCount
		,PayloadForkeeUpdatedAt
		,PayloadForkeeWatchers
		,PayloadForkeeWatchersCount
		,PayloadHead
		,PayloadIssueAssigneeId
		,PayloadIssueAssigneeLogin
		,PayloadIssueAssigneeSiteAdmin
		,PayloadIssueAssigneeType
		,PayloadIssueBody
		,PayloadIssueClosedAt
		,PayloadIssueComments
		,PayloadIssueCreatedAt
		,PayloadIssueId
		,PayloadIssueLocked
		,PayloadIssueMilestoneClosedAt
		,PayloadIssueMilestoneClosedIssues
		,PayloadIssueMilestoneCreatedAt
		,PayloadIssueMilestoneCreatorId
		,PayloadIssueMilestoneCreatorLogin
		,PayloadIssueMilestoneCreatorSiteAdmin
		,PayloadIssueMilestoneCreatorType
		,PayloadIssueMilestoneDescription
		,PayloadIssueMilestoneDueOn
		,PayloadIssueMilestoneId
		,PayloadIssueMilestoneNumber
		,PayloadIssueMilestoneOpenIssues
		,PayloadIssueMilestoneState
		,PayloadIssueMilestoneTitle
		,PayloadIssueMilestoneUpdatedAt
		,PayloadIssueNumber
		,PayloadIssueState
		,PayloadIssueTitle
		,PayloadIssueUpdatedAt
		,PayloadIssueUserId
		,PayloadIssueUserLogin
		,PayloadIssueUserSiteAdmin
		,PayloadIssueUserType
		,PayloadMasterBranch
		,PayloadMemberId
		,PayloadMemberLogin
		,PayloadMemberSiteAdmin
		,PayloadMemberType
		,PayloadNumber
		,PayloadPushId
		,PayloadPusherType
		,PayloadRef
		,PayloadRefType
		,PayloadReleaseAuthorId
		,PayloadReleaseAuthorLogin
		,PayloadReleaseAuthorSiteAdmin
		,PayloadReleaseAuthorType
		,PayloadReleaseBody
		,PayloadReleaseCreatedAt
		,PayloadReleaseDraft
		,PayloadReleaseId
		,PayloadReleaseName
		,PayloadReleasePrerelease
		,PayloadReleasePublishedAt
		,PayloadReleaseTagName
		,PayloadReleaseTargetCommitish
		,PayloadSize
		,IsPublic
		,RepoId
		,RepoName
		,Type
		,EtlSourceId
        ,EtlIngestDate
FROM @EventDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process EventPayloadCommit
//  60

@NewEventPayloadCommitExplode =
SELECT	 EtlIngestDate
        ,EventId
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS EventPayloadCommitId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,EtlSourceId
FROM @NewRawEvent AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("payload.commits[");

@NewEventPayloadCommitPrePivot =
SELECT	 EtlIngestDate
        ,EventId
        ,EventPayloadCommitId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,EtlSourceId
FROM @NewEventPayloadCommitExplode AS e
GROUP BY EtlIngestDate, EventId, EventPayloadCommitId, EtlSourceId;

@NewEventPayloadCommit =
SELECT   EventId
        ,EventPayloadCommitId
        ,GHInsights.USql.Utility.GetString(Data, "sha") AS EventPayloadCommitSha
		,GHInsights.USql.Utility.GetPiiString(Data, "author.email") AS AuthorEmail
		,GHInsights.USql.Utility.GetPiiString(Data, "author.name") AS AuthorName
		,GHInsights.USql.Utility.GetBoolean(Data, "distinct") AS Distinct
		,GHInsights.USql.Utility.GetUSqlString(Data, "message") AS Message
        ,EtlIngestDate
        ,EtlSourceId
FROM @NewEventPayloadCommitPrePivot AS e;
    
@EventPayloadCommit =
    SELECT *
    FROM dbo.EventPayloadCommit
        UNION ALL
    SELECT *
    FROM @NewEventPayloadCommit;
    
@EventPayloadCommitDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId, EventPayloadCommitSha ORDER BY EtlSourceId DESC) AS RowNumber
FROM @EventPayloadCommit;

TRUNCATE TABLE dbo.EventPayloadCommit;

INSERT dbo.EventPayloadCommit
SELECT   EventId
        ,EventPayloadCommitId
        ,EventPayloadCommitSha
		,AuthorEmail
		,AuthorName
		,Distinct
		,Message
        ,EtlIngestDate
        ,EtlSourceId
FROM @EventPayloadCommitDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process EventPayloadIssueLabel
//  2

@NewEventPayloadIssueLabelExplode =
SELECT	 EtlIngestDate
        ,EventId
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS EventPayloadIssueLabelId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,EtlSourceId
FROM @NewRawEvent AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("payload.issue.labels[");

@NewEventPayloadIssueLabelPrePivot =
SELECT	 EtlIngestDate
        ,EventId
        ,EventPayloadIssueLabelId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,EtlSourceId
FROM @NewEventPayloadIssueLabelExplode AS e
GROUP BY EtlIngestDate, EventId, EventPayloadIssueLabelId, EtlSourceId;

@NewEventPayloadIssueLabel =
SELECT EventId
        ,EventPayloadIssueLabelId
        ,EtlIngestDate
		,GHInsights.USql.Utility.GetString(Data, "color") AS Color
		,GHInsights.USql.Utility.GetString(Data, "name") AS Name
        ,EtlSourceId
FROM @NewEventPayloadIssueLabelPrePivot AS e;
    
@EventPayloadIssueLabel =
    SELECT *
    FROM dbo.EventPayloadIssueLabel
        UNION ALL
    SELECT *
    FROM @NewEventPayloadIssueLabel;
    
@EventPayloadIssueLabelDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId, Name ORDER BY EtlSourceId DESC) AS RowNumber
FROM @EventPayloadIssueLabel;

TRUNCATE TABLE dbo.EventPayloadIssueLabel;

INSERT dbo.EventPayloadIssueLabel
SELECT   EventId
        ,EventPayloadIssueLabelId
        ,EtlIngestDate
	    ,Color
	    ,Name
        ,EtlSourceId
FROM @EventPayloadIssueLabelDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process EventPayloadPage
//  2

@NewEventPayloadPageExplode =
SELECT	 EtlIngestDate
        ,EventId
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS EventPayloadPageId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,EtlSourceId
FROM @NewRawEvent AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("payload.pages[");

@NewEventPayloadPagePrePivot =
SELECT	 EtlIngestDate
        ,EventId
        ,EventPayloadPageId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,EtlSourceId
FROM @NewEventPayloadPageExplode AS e
GROUP BY EtlIngestDate, EventId, EventPayloadPageId, EtlSourceId;

@NewEventPayloadPage =
SELECT   EventId
        ,EventPayloadPageId
        ,EtlIngestDate
        ,GHInsights.USql.Utility.GetString(Data, "sha") AS EventPayloadPageSha
		,GHInsights.USql.Utility.GetString(Data, "action") AS Action
		,GHInsights.USql.Utility.GetString(Data, "page_name") AS PageName
		,GHInsights.USql.Utility.GetString(Data, "summary") AS Summary
		,GHInsights.USql.Utility.GetString(Data, "title") AS Title
        ,EtlSourceId
FROM @NewEventPayloadPagePrePivot AS e;
 
@EventPayloadPage =
    SELECT *
    FROM dbo.EventPayloadPage
        UNION ALL
    SELECT *
    FROM @NewEventPayloadPage;
    
@EventPayloadPageDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId, EventPayloadPageSha ORDER BY EtlSourceId DESC) AS RowNumber
FROM @EventPayloadPage;

TRUNCATE TABLE dbo.EventPayloadPage;

INSERT dbo.EventPayloadPage
SELECT   EventId
        ,EventPayloadPageId
        ,EtlIngestDate
        ,EventPayloadPageSha
		,Action
		,PageName
		,Summary
		,Title
        ,EtlSourceId
FROM @EventPayloadPageDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process EventPayloadPullRequest
//  60

@NewEventPayloadPullRequest =
SELECT	 EventId
        ,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.id") AS EventPayloadPullRequestId
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.additions") AS Additions
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.assignee.id") AS AssigneeId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.assignee.login") AS AssigneeLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.assignee.site_admin") AS AssigneeSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.assignee.type") AS AssigneeType
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.label") AS BaseLabel
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.ref") AS BaseRef
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.base.repo.created_at") AS BaseRepoCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.default_branch") AS BaseRepoDefaultBranch
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.description") AS BaseRepoDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.fork") AS BaseRepoFork
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.forks") AS BaseRepoForks
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.forks_count") AS BaseRepoForksCount
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.full_name") AS BaseRepoFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_downloads") AS BaseRepoHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_issues") AS BaseRepoHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_pages") AS BaseRepoHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.has_wiki") AS BaseRepoHasWiki
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.homepage") AS BaseRepoHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.id") AS BaseRepoId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.language") AS BaseRepoLanguage
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.name") AS BaseRepoName
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.open_issues") AS BaseRepoOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.open_issues_count") AS BaseRepoOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.owner.id") AS BaseRepoOwnerId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.owner.login") AS BaseRepoOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.owner.site_admin") AS BaseRepoOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.repo.owner.type") AS BaseRepoOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.repo.private") AS BaseRepoPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.base.repo.pushed_at") AS BaseRepoPushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.size") AS BaseRepoSize
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.stargazers_count") AS BaseRepoStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.base.repo.updated_at") AS BaseRepoUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.watchers") AS BaseRepoWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.repo.watchers_count") AS BaseRepoWatchersCount
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.sha") AS BaseSha
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.base.user.id") AS BaseUserId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.user.login") AS BaseUserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.base.user.site_admin") AS BaseUserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.base.user.type") AS BaseUserType
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.pull_request.body") AS Body
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.changed_files") AS ChangedFiles
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.closed_at") AS ClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.comments") AS Comments
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.commits") AS Commits
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.deletions") AS Deletions
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.label") AS HeadLabel
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.ref") AS HeadRef
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.head.repo.created_at") AS HeadRepoCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.default_branch") AS HeadRepoDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.pull_request.head.repo.description") AS HeadRepoDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.fork") AS HeadRepoFork
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.forks") AS HeadRepoForks
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.forks_count") AS HeadRepoForksCount
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.full_name") AS HeadRepoFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_downloads") AS HeadRepoHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_issues") AS HeadRepoHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_pages") AS HeadRepoHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.has_wiki") AS HeadRepoHasWiki
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.homepage") AS HeadRepoHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.id") AS HeadRepoId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.language") AS HeadRepoLanguage
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.name") AS HeadRepoName
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.open_issues") AS HeadRepoOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.open_issues_count") AS HeadRepoOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.owner.id") AS HeadRepoOwnerId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.owner.login") AS HeadRepoOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.owner.site_admin") AS HeadRepoOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.repo.owner.type") AS HeadRepoOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.repo.private") AS HeadRepoPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.head.repo.pushed_at") AS HeadRepoPushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.size") AS HeadRepoSize
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.stargazers_count") AS HeadRepoStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.head.repo.updated_at") AS HeadRepoUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.watchers") AS HeadRepoWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.repo.watchers_count") AS HeadRepoWatchersCount
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.sha") AS HeadSha
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.head.user.id") AS HeadUserId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.user.login") AS HeadUserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.head.user.site_admin") AS HeadUserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.head.user.type") AS HeadUserType
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.locked") AS Locked
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.merge_commit_sha") AS MergeCommitSha
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.mergeable") AS Mergeable
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.mergeable_state") AS MergeableState
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.merged") AS Merged
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.merged_at") AS MergedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.merged_by.id") AS MergedById
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.merged_by.login") AS MergedByLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.merged_by.site_admin") AS MergedBySiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.merged_by.type") AS MergedByType
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.closed_at") AS MilestoneClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.closed_issues") AS MilestoneClosedIssues
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.created_at") AS MilestoneCreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.creator.id") AS MilestoneCreatorId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.milestone.creator.login") AS MilestoneCreatorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.milestone.creator.site_admin") AS MilestoneCreatorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.milestone.creator.type") AS MilestoneCreatorType
		,GHInsights.USql.Utility.GetUSqlString(Data, "payload.pull_request.milestone.description") AS MilestoneDescription
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.due_on") AS MilestoneDueOn
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.id") AS MilestoneId
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.number") AS MilestoneNumber
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.milestone.open_issues") AS MilestoneOpenIssues
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.milestone.state") AS MilestoneState
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.milestone.title") AS MilestoneTitle
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.milestone.updated_at") AS MilestoneUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.number") AS Number
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.review_comments") AS ReviewComments
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.state") AS State
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.title") AS Title
		,GHInsights.USql.Utility.GetDateTime(Data, "payload.pull_request.updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "payload.pull_request.user.id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.user.login") AS UserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "payload.pull_request.user.site_admin") AS UserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "payload.pull_request.user.type") AS UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @NewRawEvent AS e
WHERE Data["payload.pull_request.id"] IS NOT NULL;

@EventPayloadPullRequest =
    SELECT *
    FROM dbo.EventPayloadPullRequest
        UNION ALL
    SELECT *
    FROM @NewEventPayloadPullRequest;

@EventPayloadPullRequestDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId ORDER BY EtlSourceId DESC) AS RowNumber
FROM @EventPayloadPullRequest;

TRUNCATE TABLE dbo.EventPayloadPullRequest;

INSERT dbo.EventPayloadPullRequest
SELECT   EventId
		,EventPayloadPullRequestId
		,Additions
		,AssigneeId
		,AssigneeLogin
		,AssigneeSiteAdmin
		,AssigneeType
		,BaseLabel
		,BaseRef
		,BaseRepoCreatedAt
		,BaseRepoDefaultBranch
		,BaseRepoDescription
		,BaseRepoFork
		,BaseRepoForks
		,BaseRepoForksCount
		,BaseRepoFullName
		,BaseRepoHasDownloads
		,BaseRepoHasIssues
		,BaseRepoHasPages
		,BaseRepoHasWiki
		,BaseRepoHomepage
		,BaseRepoId
		,BaseRepoLanguage
		,BaseRepoName
		,BaseRepoOpenIssues
		,BaseRepoOpenIssuesCount
		,BaseRepoOwnerId
		,BaseRepoOwnerLogin
		,BaseRepoOwnerSiteAdmin
		,BaseRepoOwnerType
		,BaseRepoPrivate
		,BaseRepoPushedAt
		,BaseRepoSize
		,BaseRepoStargazersCount
		,BaseRepoUpdatedAt
		,BaseRepoWatchers
		,BaseRepoWatchersCount
		,BaseSha
		,BaseUserId
		,BaseUserLogin
		,BaseUserSiteAdmin
		,BaseUserType
		,Body
		,ChangedFiles
		,ClosedAt
		,Comments
		,Commits
		,CreatedAt
		,Deletions
		,HeadLabel
		,HeadRef
		,HeadRepoCreatedAt
		,HeadRepoDefaultBranch
		,HeadRepoDescription
		,HeadRepoFork
		,HeadRepoForks
		,HeadRepoForksCount
		,HeadRepoFullName
		,HeadRepoHasDownloads
		,HeadRepoHasIssues
		,HeadRepoHasPages
		,HeadRepoHasWiki
		,HeadRepoHomepage
		,HeadRepoId
		,HeadRepoLanguage
		,HeadRepoName
		,HeadRepoOpenIssues
		,HeadRepoOpenIssuesCount
		,HeadRepoOwnerId
		,HeadRepoOwnerLogin
		,HeadRepoOwnerSiteAdmin
		,HeadRepoOwnerType
		,HeadRepoPrivate
		,HeadRepoPushedAt
		,HeadRepoSize
		,HeadRepoStargazersCount
		,HeadRepoUpdatedAt
		,HeadRepoWatchers
		,HeadRepoWatchersCount
		,HeadSha
		,HeadUserId
		,HeadUserLogin
		,HeadUserSiteAdmin
		,HeadUserType
		,Locked
		,MergeCommitSha
		,Mergeable
		,MergeableState
		,Merged
		,MergedAt
		,MergedById
		,MergedByLogin
		,MergedBySiteAdmin
		,MergedByType
		,MilestoneClosedAt
		,MilestoneClosedIssues
		,MilestoneCreatedAt
		,MilestoneCreatorId
		,MilestoneCreatorLogin
		,MilestoneCreatorSiteAdmin
		,MilestoneCreatorType
		,MilestoneDescription
		,MilestoneDueOn
		,MilestoneId
		,MilestoneNumber
		,MilestoneOpenIssues
		,MilestoneState
		,MilestoneTitle
		,MilestoneUpdatedAt
		,Number
		,ReviewComments
		,State
		,Title
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @EventPayloadPullRequestDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process EventPayloadReleaseAsset
//  2

@NewEventPayloadReleaseAssetExplode =
SELECT	 EtlIngestDate
        ,EventId
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS EventPayloadReleaseAssetId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,EtlSourceId
FROM @NewRawEvent AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("payload.release.assets[");

@NewEventPayloadReleaseAssetPrePivot =
SELECT	 EtlIngestDate
        ,EventId
        ,EventPayloadReleaseAssetId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,EtlSourceId
FROM @NewEventPayloadReleaseAssetExplode AS e
GROUP BY EtlIngestDate, EventId, EventPayloadReleaseAssetId, EtlSourceId;

@NewEventPayloadReleaseAsset =
SELECT   EventId
        ,GHInsights.USql.Utility.GetInteger(Data, "id") AS EventPayloadReleaseAssetId
		,GHInsights.USql.Utility.GetString(Data, "content_type") AS ContentType
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "download_count") AS DownloadCount
		,GHInsights.USql.Utility.GetString(Data, "name") AS Name
		,GHInsights.USql.Utility.GetInteger(Data, "size") AS Size
		,GHInsights.USql.Utility.GetString(Data, "state") AS State
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "uploader.id") AS UploaderId
		,GHInsights.USql.Utility.GetString(Data, "uploader.login") AS UploaderLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "uploader.site_admin") AS UploaderSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "uploader.type") AS UploaderType
        ,EtlSourceId
        ,EtlIngestDate
FROM @NewEventPayloadReleaseAssetPrePivot AS e;
    
@EventPayloadReleaseAsset =
    SELECT *
    FROM dbo.EventPayloadReleaseAsset
        UNION ALL
    SELECT *
    FROM @NewEventPayloadReleaseAsset;

@EventPayloadPullRequestDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventId, EventPayloadReleaseAssetId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @EventPayloadReleaseAsset;

TRUNCATE TABLE dbo.EventPayloadReleaseAsset;

INSERT dbo.EventPayloadReleaseAsset
SELECT   EventId
        ,EventPayloadReleaseAssetId
		,ContentType
		,CreatedAt
		,DownloadCount
		,Name
		,Size
		,State
		,UpdatedAt
		,UploaderId
		,UploaderLogin
		,UploaderSiteAdmin
		,UploaderType
        ,EtlSourceId
        ,EtlIngestDate
FROM @EventPayloadPullRequestDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process Fork
//  2

@NewFork =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS ForkId
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetString(Data, "default_branch") AS DefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "description") AS Description
		,GHInsights.USql.Utility.GetBoolean(Data, "fork") AS Fork
		,GHInsights.USql.Utility.GetInteger(Data, "forks") AS Forks
		,GHInsights.USql.Utility.GetInteger(Data, "forks_count") AS ForksCount
		,GHInsights.USql.Utility.GetString(Data, "full_name") AS FullName
		,GHInsights.USql.Utility.GetBoolean(Data, "has_downloads") AS HasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "has_issues") AS HasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "has_pages") AS HasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "has_wiki") AS HasWiki
		,GHInsights.USql.Utility.GetString(Data, "language") AS Language
		,GHInsights.USql.Utility.GetString(Data, "name") AS Name
		,GHInsights.USql.Utility.GetInteger(Data, "network_count") AS NetworkCount
		,GHInsights.USql.Utility.GetInteger(Data, "open_issues") AS OpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "open_issues_count") AS OpenIssuesCount
		,GHInsights.USql.Utility.GetDateTime(Data, "parent.created_at") AS ParentCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "parent.default_branch") AS ParentDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "parent.description") AS ParentDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.fork") AS ParentFork
		,GHInsights.USql.Utility.GetInteger(Data, "parent.forks") AS ParentForks
		,GHInsights.USql.Utility.GetInteger(Data, "parent.forks_count") AS ParentForksCount
		,GHInsights.USql.Utility.GetString(Data, "parent.full_name") AS ParentFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_downloads") AS ParentHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_issues") AS ParentHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_pages") AS ParentHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_wiki") AS ParentHasWiki
		,GHInsights.USql.Utility.GetInteger(Data, "parent.id") AS ParentId
		,GHInsights.USql.Utility.GetString(Data, "parent.language") AS ParentLanguage
		,GHInsights.USql.Utility.GetString(Data, "parent.name") AS ParentName
		,GHInsights.USql.Utility.GetInteger(Data, "parent.open_issues") AS ParentOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "parent.open_issues_count") AS ParentOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "parent.owner.id") AS ParentOwnerId
		,GHInsights.USql.Utility.GetString(Data, "parent.owner.login") AS ParentOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.owner.site_admin") AS ParentOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "parent.owner.type") AS ParentOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.private") AS ParentPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "parent.pushed_at") AS ParentPushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "parent.size") AS ParentSize
		,GHInsights.USql.Utility.GetInteger(Data, "parent.stargazers_count") AS ParentStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "parent.updated_at") AS ParentUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "parent.watchers") AS ParentWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "parent.watchers_count") AS ParentWatchersCount
		,GHInsights.USql.Utility.GetBoolean(Data, "permissions.admin") AS PermissionsAdmin
		,GHInsights.USql.Utility.GetBoolean(Data, "permissions.pull") AS PermissionsPull
		,GHInsights.USql.Utility.GetBoolean(Data, "permissions.push") AS PermissionsPush
		,GHInsights.USql.Utility.GetBoolean(Data, "private") AS IsPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "pushed_at") AS PushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "size") AS Size
		,GHInsights.USql.Utility.GetDateTime(Data, "source.created_at") AS SourceCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "source.default_branch") AS SourceDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "source.description") AS SourceDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "source.fork") AS SourceFork
		,GHInsights.USql.Utility.GetInteger(Data, "source.forks") AS SourceForks
		,GHInsights.USql.Utility.GetInteger(Data, "source.forks_count") AS SourceForksCount
		,GHInsights.USql.Utility.GetString(Data, "source.full_name") AS SourceFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_downloads") AS SourceHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_issues") AS SourceHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_pages") AS SourceHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_wiki") AS SourceHasWiki
		,GHInsights.USql.Utility.GetInteger(Data, "source.id") AS SourceId
		,GHInsights.USql.Utility.GetString(Data, "source.language") AS SourceLanguage
		,GHInsights.USql.Utility.GetString(Data, "source.name") AS SourceName
		,GHInsights.USql.Utility.GetInteger(Data, "source.open_issues") AS SourceOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "source.open_issues_count") AS SourceOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "source.owner.id") AS SourceOwnerId
		,GHInsights.USql.Utility.GetString(Data, "source.owner.login") AS SourceOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "source.owner.site_admin") AS SourceOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "source.owner.type") AS SourceOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "source.private") AS SourcePrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "source.pushed_at") AS SourcePushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "source.size") AS SourceSize
		,GHInsights.USql.Utility.GetInteger(Data, "source.stargazers_count") AS SourceStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "source.updated_at") AS SourceUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "source.watchers") AS SourceWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "source.watchers_count") AS SourceWatchersCount
		,GHInsights.USql.Utility.GetInteger(Data, "stargazers_count") AS StargazersCount
		,GHInsights.USql.Utility.GetInteger(Data, "subscribers_count") AS SubscribersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "watchers") AS Watchers
		,GHInsights.USql.Utility.GetInteger(Data, "watchers_count") AS WatchersCount
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "forks"
AND   IngestDate == @IngestDatePartition;

@Fork =
    SELECT *
    FROM dbo.Fork
        UNION ALL
    SELECT *
    FROM @NewFork;
    
@ForkDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY ForkId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Fork;

TRUNCATE TABLE dbo.Fork;

INSERT dbo.Fork
SELECT   Repo
		,Owner
		,ForkId
		,CreatedAt
		,DefaultBranch
		,Description
		,Fork
		,Forks
		,ForksCount
		,FullName
		,HasDownloads
		,HasIssues
		,HasPages
		,HasWiki
		,Language
		,Name
		,NetworkCount
		,OpenIssues
		,OpenIssuesCount
		,ParentCreatedAt
		,ParentDefaultBranch
		,ParentDescription
		,ParentFork
		,ParentForks
		,ParentForksCount
		,ParentFullName
		,ParentHasDownloads
		,ParentHasIssues
		,ParentHasPages
		,ParentHasWiki
		,ParentId
		,ParentLanguage
		,ParentName
		,ParentOpenIssues
		,ParentOpenIssuesCount
		,ParentOwnerId
		,ParentOwnerLogin
		,ParentOwnerSiteAdmin
		,ParentOwnerType
		,ParentPrivate
		,ParentPushedAt
		,ParentSize
		,ParentStargazersCount
		,ParentUpdatedAt
		,ParentWatchers
		,ParentWatchersCount
		,PermissionsAdmin
		,PermissionsPull
		,PermissionsPush
		,IsPrivate
		,PushedAt
		,Size
		,SourceCreatedAt
		,SourceDefaultBranch
		,SourceDescription
		,SourceFork
		,SourceForks
		,SourceForksCount
		,SourceFullName
		,SourceHasDownloads
		,SourceHasIssues
		,SourceHasPages
		,SourceHasWiki
		,SourceId
		,SourceLanguage
		,SourceName
		,SourceOpenIssues
		,SourceOpenIssuesCount
		,SourceOwnerId
		,SourceOwnerLogin
		,SourceOwnerSiteAdmin
		,SourceOwnerType
		,SourcePrivate
		,SourcePushedAt
		,SourceSize
		,SourceStargazersCount
		,SourceUpdatedAt
		,SourceWatchers
		,SourceWatchersCount
		,StargazersCount
		,SubscribersCount
		,UpdatedAt
		,Watchers
		,WatchersCount
		,EtlSourceId
        ,EtlIngestDate
FROM @ForkDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process GeoCache
//  2

@NewGeoCache =
SELECT	 GHInsights.USql.Utility.GetString(Data, "key") AS Key
		,GHInsights.USql.Utility.GetString(Data, "city") AS City
		,GHInsights.USql.Utility.GetString(Data, "country") AS Country
		,GHInsights.USql.Utility.GetString(Data, "country_code") AS CountryCode
		,GHInsights.USql.Utility.GetString(Data, "lat") AS Latitude
		,GHInsights.USql.Utility.GetString(Data, "long") AS Longitude
		,GHInsights.USql.Utility.GetString(Data, "state") AS State
		,GHInsights.USql.Utility.GetString(Data, "status") AS Status
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "geo_cache"
AND   IngestDate == @IngestDatePartition;

@GeoCache =
    SELECT *
    FROM dbo.GeoCache
        UNION ALL
    SELECT *
    FROM @NewGeoCache;
    
@GeoCacheDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY Key ORDER BY EtlSourceId DESC) AS RowNumber
FROM @GeoCache;

TRUNCATE TABLE dbo.GeoCache;

INSERT dbo.GeoCache
SELECT   Key
		,City
		,Country
		,CountryCode
		,Latitude
		,Longitude
		,State
		,Status
		,EtlSourceId
        ,EtlIngestDate
FROM @GeoCacheDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process Issue
//  10

@NewRawIssue =
SELECT   GHInsights.USql.Utility.GetInteger(Data, "id") AS IssueId 
        ,Data
        ,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
        ,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
        FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "issues"
AND   IngestDate == @IngestDatePartition;
    
@NewIssue =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetInteger(Data, "number") AS Number
        ,IssueId
		,GHInsights.USql.Utility.GetInteger(Data, "assignee.id") AS AssigneeId
		,GHInsights.USql.Utility.GetString(Data, "assignee.login") AS AssigneeLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "assignee.site_admin") AS AssigneeSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "assignee.type") AS AssigneeType
		,GHInsights.USql.Utility.GetUSqlString(Data, "body") AS Body
		,GHInsights.USql.Utility.GetDateTime(Data, "closed_at") AS ClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "closed_by.id") AS ClosedById
		,GHInsights.USql.Utility.GetString(Data, "closed_by.login") AS ClosedByLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "closed_by.site_admin") AS ClosedBySiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "closed_by.type") AS ClosedByType
		,GHInsights.USql.Utility.GetInteger(Data, "comments") AS Comments
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetBoolean(Data, "locked") AS Locked
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.closed_at") AS MilestoneClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.closed_issues") AS MilestoneClosedIssues
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.created_at") AS MilestoneCreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.creator.id") AS MilestoneCreatorId
		,GHInsights.USql.Utility.GetString(Data, "milestone.creator.login") AS MilestoneCreatorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "milestone.creator.site_admin") AS MilestoneCreatorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "milestone.creator.type") AS MilestoneCreatorType
		,GHInsights.USql.Utility.GetUSqlString(Data, "milestone.description") AS MilestoneDescription
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.due_on") AS MilestoneDueOn
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.id") AS MilestoneId
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.number") AS MilestoneNumber
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.open_issues") AS MilestoneOpenIssues
		,GHInsights.USql.Utility.GetString(Data, "milestone.state") AS MilestoneState
		,GHInsights.USql.Utility.GetString(Data, "milestone.title") AS MilestoneTitle
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.updated_at") AS MilestoneUpdatedAt
		,GHInsights.USql.Utility.GetString(Data, "pull_request.url") AS PullRequestUrl
		,GHInsights.USql.Utility.GetString(Data, "state") AS State
		,GHInsights.USql.Utility.GetString(Data, "title") AS Title
		,UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "user.id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "user.login") AS UserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "user.site_admin") AS UserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "user.type") AS UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @NewRawIssue AS e;

@Issue =
    SELECT *
    FROM dbo.Issue
        UNION ALL
    SELECT *
    FROM @NewIssue;

@IssueDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY IssueId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Issue;

TRUNCATE TABLE dbo.Issue;

INSERT dbo.Issue
SELECT   Repo
		,Owner
		,Number
        ,IssueId
		,AssigneeId
		,AssigneeLogin
		,AssigneeSiteAdmin
		,AssigneeType
		,Body
		,ClosedAt
		,ClosedById
		,ClosedByLogin
		,ClosedBySiteAdmin
		,ClosedByType
		,Comments
		,CreatedAt
		,Locked
		,MilestoneClosedAt
		,MilestoneClosedIssues
		,MilestoneCreatedAt
		,MilestoneCreatorId
		,MilestoneCreatorLogin
		,MilestoneCreatorSiteAdmin
		,MilestoneCreatorType
		,MilestoneDescription
		,MilestoneDueOn
		,MilestoneId
		,MilestoneNumber
		,MilestoneOpenIssues
		,MilestoneState
		,MilestoneTitle
		,MilestoneUpdatedAt
        ,PullRequestUrl
		,State
		,Title
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @IssueDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process IssueComment
//  10

@NewIssueComment =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetInteger(Data, "issue_id") AS IssueId
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS IssueCommentId
		,GHInsights.USql.Utility.GetUSqlString(Data, "body") AS Body
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "user.id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "user.login") AS UserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "user.site_admin") AS UserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "user.type") AS UserType
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "issue_comments"
AND   IngestDate == @IngestDatePartition;

@IssueComment =
    SELECT *
    FROM dbo.IssueComment
        UNION ALL
    SELECT *
    FROM @NewIssueComment;
    
@IssueCommentDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY IssueCommentId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @IssueComment;

TRUNCATE TABLE dbo.IssueComment;

INSERT dbo.IssueComment
SELECT   Repo
		,Owner
		,IssueId
		,IssueCommentId
		,Body
		,CreatedAt
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @IssueCommentDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process IssueEvent
//  2

@NewIssueEvent =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetInteger(Data, "issue_id") AS IssueId
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS IssueEventId
		,GHInsights.USql.Utility.GetInteger(Data, "actor.id") AS ActorId
		,GHInsights.USql.Utility.GetString(Data, "actor.login") AS ActorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "actor.site_admin") AS ActorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "actor.type") AS ActorType
		,GHInsights.USql.Utility.GetInteger(Data, "assignee.id") AS AssigneeId
		,GHInsights.USql.Utility.GetString(Data, "assignee.login") AS AssigneeLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "assignee.site_admin") AS AssigneeSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "assignee.type") AS AssigneeType
		,GHInsights.USql.Utility.GetString(Data, "commit_id") AS CommitId
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetString(Data, "event") AS EventName
		,GHInsights.USql.Utility.GetString(Data, "label.color") AS LabelColor
		,GHInsights.USql.Utility.GetString(Data, "label.name") AS LabelName
		,GHInsights.USql.Utility.GetString(Data, "milestone.title") AS MilestoneTitle
		,GHInsights.USql.Utility.GetString(Data, "rename.from") AS RenameFrom
		,GHInsights.USql.Utility.GetString(Data, "rename.to") AS RenameTo
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "issue_events"
AND   IngestDate == @IngestDatePartition;

@IssueEvent =
    SELECT *
    FROM dbo.IssueEvent
        UNION ALL
    SELECT *
    FROM @NewIssueEvent;
    
@IssueEventDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY IssueEventId ORDER BY EtlSourceId DESC) AS RowNumber
FROM @IssueEvent;

TRUNCATE TABLE dbo.IssueEvent;

INSERT dbo.IssueEvent
SELECT   Repo
		,Owner
		,IssueId
		,IssueEventId
		,ActorId
		,ActorLogin
		,ActorSiteAdmin
		,ActorType
		,AssigneeId
		,AssigneeLogin
		,AssigneeSiteAdmin
		,AssigneeType
		,CommitId
		,CreatedAt
		,EventName
		,LabelColor
		,LabelName
		,MilestoneTitle
		,RenameFrom
		,RenameTo
		,EtlSourceId
        ,EtlIngestDate
FROM @IssueEventDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process IssueLabel
//  2

@NewIssueLabelExplode =
SELECT	 EtlIngestDate
        ,IssueId
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS IssueLabelId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value
        ,UpdatedAt
        ,EtlSourceId
FROM @NewRawIssue AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("labels[");

@NewIssueLabelPrePivot =
SELECT	 EtlIngestDate
        ,IssueId
        ,IssueLabelId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,UpdatedAt
        ,EtlSourceId
FROM @NewIssueLabelExplode AS e
GROUP BY EtlIngestDate, IssueId, IssueLabelId, UpdatedAt, EtlSourceId;

@NewIssueLabel =
SELECT IssueId
        ,IssueLabelId
        ,EtlIngestDate
		,GHInsights.USql.Utility.GetString(Data, "color") AS Color
		,GHInsights.USql.Utility.GetString(Data, "name") AS Name
        ,UpdatedAt
        ,EtlSourceId
FROM @NewIssueLabelPrePivot AS e;

@IssueLabel =
    SELECT *
    FROM dbo.IssueLabel
        UNION ALL
    SELECT *
    FROM @NewIssueLabel;
    
@IssueLabelDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY IssueId, Name ORDER BY EtlSourceId DESC) AS RowNumber
FROM @IssueLabel;

TRUNCATE TABLE dbo.IssueLabel;

INSERT dbo.IssueLabel
SELECT   IssueId
        ,IssueLabelId
        ,EtlIngestDate
		,Color
		,Name
        ,UpdatedAt
        ,EtlSourceId
FROM @IssueLabelDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process OrgMember
//  2

@NewOrgMember =
SELECT	 GHInsights.USql.Utility.GetString(Data, "org") AS Org
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS OrgMemberId
		,GHInsights.USql.Utility.GetString(Data, "login") AS Login
		,GHInsights.USql.Utility.GetBoolean(Data, "site_admin") AS SiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "type") AS Type
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "org_members"
AND   IngestDate == @IngestDatePartition;

@OrgMember =
    SELECT *
    FROM dbo.OrgMember
        UNION ALL
    SELECT *
    FROM @NewOrgMember;

@OrgMemberDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY Org, OrgMemberId, Login, Type ORDER BY EtlSourceId DESC) AS RowNumber
FROM @OrgMember;

TRUNCATE TABLE dbo.OrgMember;

INSERT dbo.OrgMember
SELECT   Org
		,OrgMemberId
		,Login
		,SiteAdmin
		,Type
		,EtlSourceId
        ,EtlIngestDate
FROM @OrgMemberDeDupe
WHERE RowNumber == 1;
    
////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process PullRequest
//  10


@NewPullRequest =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetInteger(Data, "number") AS Number
        ,GHInsights.USql.Utility.GetInteger(Data, "id") AS PullRequestId
		,GHInsights.USql.Utility.GetString(Data, "_links.comments.href") AS LinksCommentsHref
		,GHInsights.USql.Utility.GetString(Data, "_links.commits.href") AS LinksCommitsHref
		,GHInsights.USql.Utility.GetString(Data, "_links.html.href") AS LinksHtmlHref
		,GHInsights.USql.Utility.GetString(Data, "_links.issue.href") AS LinksIssueHref
		,GHInsights.USql.Utility.GetString(Data, "_links.review_comment.href") AS LinksReviewCommentHref
		,GHInsights.USql.Utility.GetString(Data, "_links.review_comments.href") AS LinksReviewCommentsHref
		,GHInsights.USql.Utility.GetString(Data, "_links.self.href") AS LinksSelfHref
		,GHInsights.USql.Utility.GetString(Data, "_links.statuses.href") AS LinksStatusesHref
		,GHInsights.USql.Utility.GetInteger(Data, "additions") AS Additions
		,GHInsights.USql.Utility.GetInteger(Data, "assignee.id") AS AssigneeId
		,GHInsights.USql.Utility.GetString(Data, "assignee.login") AS AssigneeLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "assignee.site_admin") AS AssigneeSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "assignee.type") AS AssigneeType
		,GHInsights.USql.Utility.GetString(Data, "base.label") AS BaseLabel
		,GHInsights.USql.Utility.GetString(Data, "base.ref") AS BaseRef
		,GHInsights.USql.Utility.GetDateTime(Data, "base.repo.created_at") AS BaseRepoCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "base.repo.default_branch") AS BaseRepoDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "base.repo.description") AS BaseRepoDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.fork") AS BaseRepoFork
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.forks") AS BaseRepoForks
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.forks_count") AS BaseRepoForksCount
		,GHInsights.USql.Utility.GetString(Data, "base.repo.full_name") AS BaseRepoFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.has_downloads") AS BaseRepoHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.has_issues") AS BaseRepoHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.has_pages") AS BaseRepoHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.has_wiki") AS BaseRepoHasWiki
		,GHInsights.USql.Utility.GetString(Data, "base.repo.homepage") AS BaseRepoHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.id") AS BaseRepoId
		,GHInsights.USql.Utility.GetString(Data, "base.repo.language") AS BaseRepoLanguage
		,GHInsights.USql.Utility.GetString(Data, "base.repo.name") AS BaseRepoName
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.open_issues") AS BaseRepoOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.open_issues_count") AS BaseRepoOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.owner.id") AS BaseRepoOwnerId
		,GHInsights.USql.Utility.GetString(Data, "base.repo.owner.login") AS BaseRepoOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.owner.site_admin") AS BaseRepoOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "base.repo.owner.type") AS BaseRepoOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "base.repo.private") AS BaseRepoPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "base.repo.pushed_at") AS BaseRepoPushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.size") AS BaseRepoSize
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.stargazers_count") AS BaseRepoStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "base.repo.updated_at") AS BaseRepoUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.watchers") AS BaseRepoWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "base.repo.watchers_count") AS BaseRepoWatchersCount
		,GHInsights.USql.Utility.GetString(Data, "base.sha") AS BaseSha
		,GHInsights.USql.Utility.GetInteger(Data, "base.user.id") AS BaseUserId
		,GHInsights.USql.Utility.GetString(Data, "base.user.login") AS BaseUserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "base.user.site_admin") AS BaseUserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "base.user.type") AS BaseUserType
		,GHInsights.USql.Utility.GetUSqlString(Data, "body") AS Body
		,GHInsights.USql.Utility.GetInteger(Data, "changed_files") AS ChangedFiles
		,GHInsights.USql.Utility.GetDateTime(Data, "closed_at") AS ClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "comments") AS Comments
		,GHInsights.USql.Utility.GetInteger(Data, "commits") AS Commits
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "deletions") AS Deletions
		,GHInsights.USql.Utility.GetString(Data, "head.label") AS HeadLabel
		,GHInsights.USql.Utility.GetString(Data, "head.ref") AS HeadRef
		,GHInsights.USql.Utility.GetDateTime(Data, "head.repo.created_at") AS HeadRepoCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "head.repo.default_branch") AS HeadRepoDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "head.repo.description") AS HeadRepoDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.fork") AS HeadRepoFork
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.forks") AS HeadRepoForks
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.forks_count") AS HeadRepoForksCount
		,GHInsights.USql.Utility.GetString(Data, "head.repo.full_name") AS HeadRepoFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.has_downloads") AS HeadRepoHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.has_issues") AS HeadRepoHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.has_pages") AS HeadRepoHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.has_wiki") AS HeadRepoHasWiki
		,GHInsights.USql.Utility.GetString(Data, "head.repo.homepage") AS HeadRepoHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.id") AS HeadRepoId
		,GHInsights.USql.Utility.GetString(Data, "head.repo.language") AS HeadRepoLanguage
		,GHInsights.USql.Utility.GetString(Data, "head.repo.name") AS HeadRepoName
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.open_issues") AS HeadRepoOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.open_issues_count") AS HeadRepoOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.owner.id") AS HeadRepoOwnerId
		,GHInsights.USql.Utility.GetString(Data, "head.repo.owner.login") AS HeadRepoOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.owner.site_admin") AS HeadRepoOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "head.repo.owner.type") AS HeadRepoOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "head.repo.private") AS HeadRepoPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "head.repo.pushed_at") AS HeadRepoPushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.size") AS HeadRepoSize
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.stargazers_count") AS HeadRepoStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "head.repo.updated_at") AS HeadRepoUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.watchers") AS HeadRepoWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "head.repo.watchers_count") AS HeadRepoWatchersCount
		,GHInsights.USql.Utility.GetString(Data, "head.sha") AS HeadSha
		,GHInsights.USql.Utility.GetInteger(Data, "head.user.id") AS HeadUserId
		,GHInsights.USql.Utility.GetString(Data, "head.user.login") AS HeadUserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "head.user.site_admin") AS HeadUserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "head.user.type") AS HeadUserType
		,GHInsights.USql.Utility.GetBoolean(Data, "locked") AS Locked
		,GHInsights.USql.Utility.GetString(Data, "merge_commit_sha") AS MergeCommitSha
		,GHInsights.USql.Utility.GetBoolean(Data, "mergeable") AS Mergeable
		,GHInsights.USql.Utility.GetString(Data, "mergeable_state") AS MergeableState
		,GHInsights.USql.Utility.GetBoolean(Data, "merged") AS Merged
		,GHInsights.USql.Utility.GetDateTime(Data, "merged_at") AS MergedAt
		,GHInsights.USql.Utility.GetInteger(Data, "merged_by.id") AS MergedById
		,GHInsights.USql.Utility.GetString(Data, "merged_by.login") AS MergedByLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "merged_by.site_admin") AS MergedBySiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "merged_by.type") AS MergedByType
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.closed_at") AS MilestoneClosedAt
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.closed_issues") AS MilestoneClosedIssues
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.created_at") AS MilestoneCreatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.creator.id") AS MilestoneCreatorId
		,GHInsights.USql.Utility.GetString(Data, "milestone.creator.login") AS MilestoneCreatorLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "milestone.creator.site_admin") AS MilestoneCreatorSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "milestone.creator.type") AS MilestoneCreatorType
		,GHInsights.USql.Utility.GetUSqlString(Data, "milestone.description") AS MilestoneDescription
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.due_on") AS MilestoneDueOn
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.id") AS MilestoneId
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.number") AS MilestoneNumber
		,GHInsights.USql.Utility.GetInteger(Data, "milestone.open_issues") AS MilestoneOpenIssues
		,GHInsights.USql.Utility.GetString(Data, "milestone.state") AS MilestoneState
		,GHInsights.USql.Utility.GetString(Data, "milestone.title") AS MilestoneTitle
		,GHInsights.USql.Utility.GetDateTime(Data, "milestone.updated_at") AS MilestoneUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "review_comments") AS ReviewComments
		,GHInsights.USql.Utility.GetString(Data, "state") AS State
		,GHInsights.USql.Utility.GetString(Data, "title") AS Title
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "user.id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "user.login") AS UserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "user.site_admin") AS UserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "user.type") AS UserType
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "pull_requests"
AND   IngestDate == @IngestDatePartition;

@PullRequest =
    SELECT *
    FROM dbo.PullRequest
        UNION ALL
    SELECT *
    FROM @NewPullRequest;

@PullRequestDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY PullRequestId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @PullRequest;

TRUNCATE TABLE dbo.PullRequest;

INSERT dbo.PullRequest
SELECT   Repo
		,Owner
		,Number
        ,PullRequestId
		,LinksCommentsHref
		,LinksCommitsHref
		,LinksHtmlHref
		,LinksIssueHref
		,LinksReviewCommentHref
		,LinksReviewCommentsHref
		,LinksSelfHref
		,LinksStatusesHref
		,Additions
		,AssigneeId
		,AssigneeLogin
		,AssigneeSiteAdmin
		,AssigneeType
		,BaseLabel
		,BaseRef
		,BaseRepoCreatedAt
		,BaseRepoDefaultBranch
		,BaseRepoDescription
		,BaseRepoFork
		,BaseRepoForks
		,BaseRepoForksCount
		,BaseRepoFullName
		,BaseRepoHasDownloads
		,BaseRepoHasIssues
		,BaseRepoHasPages
		,BaseRepoHasWiki
		,BaseRepoHomepage
		,BaseRepoId
		,BaseRepoLanguage
		,BaseRepoName
		,BaseRepoOpenIssues
		,BaseRepoOpenIssuesCount
		,BaseRepoOwnerId
		,BaseRepoOwnerLogin
		,BaseRepoOwnerSiteAdmin
		,BaseRepoOwnerType
		,BaseRepoPrivate
		,BaseRepoPushedAt
		,BaseRepoSize
		,BaseRepoStargazersCount
		,BaseRepoUpdatedAt
		,BaseRepoWatchers
		,BaseRepoWatchersCount
		,BaseSha
		,BaseUserId
		,BaseUserLogin
		,BaseUserSiteAdmin
		,BaseUserType
		,Body
		,ChangedFiles
		,ClosedAt
		,Comments
		,Commits
		,CreatedAt
		,Deletions
		,HeadLabel
		,HeadRef
		,HeadRepoCreatedAt
		,HeadRepoDefaultBranch
		,HeadRepoDescription
		,HeadRepoFork
		,HeadRepoForks
		,HeadRepoForksCount
		,HeadRepoFullName
		,HeadRepoHasDownloads
		,HeadRepoHasIssues
		,HeadRepoHasPages
		,HeadRepoHasWiki
		,HeadRepoHomepage
		,HeadRepoId
		,HeadRepoLanguage
		,HeadRepoName
		,HeadRepoOpenIssues
		,HeadRepoOpenIssuesCount
		,HeadRepoOwnerId
		,HeadRepoOwnerLogin
		,HeadRepoOwnerSiteAdmin
		,HeadRepoOwnerType
		,HeadRepoPrivate
		,HeadRepoPushedAt
		,HeadRepoSize
		,HeadRepoStargazersCount
		,HeadRepoUpdatedAt
		,HeadRepoWatchers
		,HeadRepoWatchersCount
		,HeadSha
		,HeadUserId
		,HeadUserLogin
		,HeadUserSiteAdmin
		,HeadUserType
		,Locked
		,MergeCommitSha
		,Mergeable
		,MergeableState
		,Merged
		,MergedAt
		,MergedById
		,MergedByLogin
		,MergedBySiteAdmin
		,MergedByType
		,MilestoneClosedAt
		,MilestoneClosedIssues
		,MilestoneCreatedAt
		,MilestoneCreatorId
		,MilestoneCreatorLogin
		,MilestoneCreatorSiteAdmin
		,MilestoneCreatorType
		,MilestoneDescription
		,MilestoneDueOn
		,MilestoneId
		,MilestoneNumber
		,MilestoneOpenIssues
		,MilestoneState
		,MilestoneTitle
		,MilestoneUpdatedAt
		,ReviewComments
		,State
		,Title
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @PullRequestDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process PullRequestComment
//  10


@NewPullRequestComment =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetInteger(Data, "pullreq_id") AS PullRequestId
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS PullRequestCommentId
		,GHInsights.USql.Utility.GetString(Data, "_links.html.href") AS LinksHtmlHref
		,GHInsights.USql.Utility.GetString(Data, "_links.pull_request.href") AS LinksPullRequestHref
		,GHInsights.USql.Utility.GetString(Data, "_links.self.href") AS LinksSelfHref
		,GHInsights.USql.Utility.GetUSqlString(Data, "body") AS Body
		,GHInsights.USql.Utility.GetString(Data, "commit_id") AS CommitId
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetString(Data, "diff_hunk") AS DiffHunk
		,GHInsights.USql.Utility.GetString(Data, "original_commit_id") AS OriginalCommitId
		,GHInsights.USql.Utility.GetInteger(Data, "original_position") AS OriginalPosition
		,GHInsights.USql.Utility.GetString(Data, "path") AS Path
		,GHInsights.USql.Utility.GetInteger(Data, "position") AS Position
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "user.id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "user.login") AS UserLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "user.site_admin") AS UserSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "user.type") AS UserType
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "pull_request_comments"
AND   IngestDate == @IngestDatePartition;

@PullRequestComment =
    SELECT *
    FROM dbo.PullRequestComment
        UNION ALL
    SELECT *
    FROM @NewPullRequestComment;

@PullRequestCommentDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY PullRequestCommentId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @PullRequestComment;

TRUNCATE TABLE dbo.PullRequestComment;

INSERT dbo.PullRequestComment
SELECT   Repo
		,Owner
		,PullRequestId
		,PullRequestCommentId
		,LinksHtmlHref
		,LinksPullRequestHref
		,LinksSelfHref
		,Body
		,CommitId
		,CreatedAt
		,DiffHunk
		,OriginalCommitId
		,OriginalPosition
		,Path
		,Position
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @PullRequestCommentDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process Repo
//  20

@NewRepo =
SELECT	 GHInsights.USql.Utility.GetString(Data, "name") AS Name
		,GHInsights.USql.Utility.GetString(Data, "owner.login") AS OwnerLogin
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetString(Data, "default_branch") AS DefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "description") AS Description
		,GHInsights.USql.Utility.GetBoolean(Data, "fork") AS Fork
		,GHInsights.USql.Utility.GetInteger(Data, "forks") AS Forks
		,GHInsights.USql.Utility.GetInteger(Data, "forks_count") AS ForksCount
		,GHInsights.USql.Utility.GetString(Data, "full_name") AS FullName
		,GHInsights.USql.Utility.GetBoolean(Data, "has_downloads") AS HasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "has_issues") AS HasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "has_pages") AS HasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "has_wiki") AS HasWiki
		,GHInsights.USql.Utility.GetString(Data, "homepage") AS Homepage
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS RepoId
		,GHInsights.USql.Utility.GetString(Data, "language") AS Language
		,GHInsights.USql.Utility.GetInteger(Data, "network_count") AS NetworkCount
		,GHInsights.USql.Utility.GetInteger(Data, "open_issues") AS OpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "open_issues_count") AS OpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "organization.id") AS OrganizationId
		,GHInsights.USql.Utility.GetString(Data, "organization.login") AS OrganizationLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "organization.site_admin") AS OrganizationSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "organization.type") AS OrganizationType
		,GHInsights.USql.Utility.GetInteger(Data, "owner.id") AS OwnerId
		,GHInsights.USql.Utility.GetBoolean(Data, "owner.site_admin") AS OwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "owner.type") AS OwnerType
		,GHInsights.USql.Utility.GetDateTime(Data, "parent.created_at") AS ParentCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "parent.default_branch") AS ParentDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "parent.description") AS ParentDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.fork") AS ParentFork
		,GHInsights.USql.Utility.GetInteger(Data, "parent.forks") AS ParentForks
		,GHInsights.USql.Utility.GetInteger(Data, "parent.forks_count") AS ParentForksCount
		,GHInsights.USql.Utility.GetString(Data, "parent.full_name") AS ParentFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_downloads") AS ParentHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_issues") AS ParentHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_pages") AS ParentHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.has_wiki") AS ParentHasWiki
		,GHInsights.USql.Utility.GetString(Data, "parent.homepage") AS ParentHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "parent.id") AS ParentId
		,GHInsights.USql.Utility.GetString(Data, "parent.language") AS ParentLanguage
		,GHInsights.USql.Utility.GetString(Data, "parent.name") AS ParentName
		,GHInsights.USql.Utility.GetInteger(Data, "parent.open_issues") AS ParentOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "parent.open_issues_count") AS ParentOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "parent.owner.id") AS ParentOwnerId
		,GHInsights.USql.Utility.GetString(Data, "parent.owner.login") AS ParentOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.owner.site_admin") AS ParentOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "parent.owner.type") AS ParentOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "parent.private") AS ParentPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "parent.pushed_at") AS ParentPushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "parent.size") AS ParentSize
		,GHInsights.USql.Utility.GetInteger(Data, "parent.stargazers_count") AS ParentStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "parent.updated_at") AS ParentUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "parent.watchers") AS ParentWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "parent.watchers_count") AS ParentWatchersCount
		,GHInsights.USql.Utility.GetBoolean(Data, "permissions.admin") AS PermissionsAdmin
		,GHInsights.USql.Utility.GetBoolean(Data, "permissions.pull") AS PermissionsPull
		,GHInsights.USql.Utility.GetBoolean(Data, "permissions.push") AS PermissionsPush
		,GHInsights.USql.Utility.GetBoolean(Data, "private") AS IsPrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "pushed_at") AS PushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "size") AS Size
		,GHInsights.USql.Utility.GetDateTime(Data, "source.created_at") AS SourceCreatedAt
		,GHInsights.USql.Utility.GetString(Data, "source.default_branch") AS SourceDefaultBranch
		,GHInsights.USql.Utility.GetUSqlString(Data, "source.description") AS SourceDescription
		,GHInsights.USql.Utility.GetBoolean(Data, "source.fork") AS SourceFork
		,GHInsights.USql.Utility.GetInteger(Data, "source.forks") AS SourceForks
		,GHInsights.USql.Utility.GetInteger(Data, "source.forks_count") AS SourceForksCount
		,GHInsights.USql.Utility.GetString(Data, "source.full_name") AS SourceFullName
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_downloads") AS SourceHasDownloads
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_issues") AS SourceHasIssues
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_pages") AS SourceHasPages
		,GHInsights.USql.Utility.GetBoolean(Data, "source.has_wiki") AS SourceHasWiki
		,GHInsights.USql.Utility.GetString(Data, "source.homepage") AS SourceHomepage
		,GHInsights.USql.Utility.GetInteger(Data, "source.id") AS SourceId
		,GHInsights.USql.Utility.GetString(Data, "source.language") AS SourceLanguage
		,GHInsights.USql.Utility.GetString(Data, "source.name") AS SourceName
		,GHInsights.USql.Utility.GetInteger(Data, "source.open_issues") AS SourceOpenIssues
		,GHInsights.USql.Utility.GetInteger(Data, "source.open_issues_count") AS SourceOpenIssuesCount
		,GHInsights.USql.Utility.GetInteger(Data, "source.owner.id") AS SourceOwnerId
		,GHInsights.USql.Utility.GetString(Data, "source.owner.login") AS SourceOwnerLogin
		,GHInsights.USql.Utility.GetBoolean(Data, "source.owner.site_admin") AS SourceOwnerSiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "source.owner.type") AS SourceOwnerType
		,GHInsights.USql.Utility.GetBoolean(Data, "source.private") AS SourcePrivate
		,GHInsights.USql.Utility.GetDateTime(Data, "source.pushed_at") AS SourcePushedAt
		,GHInsights.USql.Utility.GetInteger(Data, "source.size") AS SourceSize
		,GHInsights.USql.Utility.GetInteger(Data, "source.stargazers_count") AS SourceStargazersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "source.updated_at") AS SourceUpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "source.watchers") AS SourceWatchers
		,GHInsights.USql.Utility.GetInteger(Data, "source.watchers_count") AS SourceWatchersCount
		,GHInsights.USql.Utility.GetInteger(Data, "stargazers_count") AS StargazersCount
		,GHInsights.USql.Utility.GetInteger(Data, "subscribers_count") AS SubscribersCount
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetInteger(Data, "watchers") AS Watchers
		,GHInsights.USql.Utility.GetInteger(Data, "watchers_count") AS WatchersCount
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "repos"
AND   IngestDate == @IngestDatePartition;

@Repo =
    SELECT *
    FROM dbo.Repo
        UNION ALL
    SELECT *
    FROM @NewRepo;

@RepoDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY RepoId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Repo;

TRUNCATE TABLE dbo.Repo;

INSERT dbo.Repo
SELECT   Name
		,OwnerLogin
		,CreatedAt
		,DefaultBranch
		,Description
		,Fork
		,Forks
		,ForksCount
		,FullName
		,HasDownloads
		,HasIssues
		,HasPages
		,HasWiki
		,Homepage
		,RepoId
		,Language
		,NetworkCount
		,OpenIssues
		,OpenIssuesCount
		,OrganizationId
		,OrganizationLogin
		,OrganizationSiteAdmin
		,OrganizationType
		,OwnerId
		,OwnerSiteAdmin
		,OwnerType
		,ParentCreatedAt
		,ParentDefaultBranch
		,ParentDescription
		,ParentFork
		,ParentForks
		,ParentForksCount
		,ParentFullName
		,ParentHasDownloads
		,ParentHasIssues
		,ParentHasPages
		,ParentHasWiki
		,ParentHomepage
		,ParentId
		,ParentLanguage
		,ParentName
		,ParentOpenIssues
		,ParentOpenIssuesCount
		,ParentOwnerId
		,ParentOwnerLogin
		,ParentOwnerSiteAdmin
		,ParentOwnerType
		,ParentPrivate
		,ParentPushedAt
		,ParentSize
		,ParentStargazersCount
		,ParentUpdatedAt
		,ParentWatchers
		,ParentWatchersCount
		,PermissionsAdmin
		,PermissionsPull
		,PermissionsPush
		,IsPrivate
		,PushedAt
		,Size
		,SourceCreatedAt
		,SourceDefaultBranch
		,SourceDescription
		,SourceFork
		,SourceForks
		,SourceForksCount
		,SourceFullName
		,SourceHasDownloads
		,SourceHasIssues
		,SourceHasPages
		,SourceHasWiki
		,SourceHomepage
		,SourceId
		,SourceLanguage
		,SourceName
		,SourceOpenIssues
		,SourceOpenIssuesCount
		,SourceOwnerId
		,SourceOwnerLogin
		,SourceOwnerSiteAdmin
		,SourceOwnerType
		,SourcePrivate
		,SourcePushedAt
		,SourceSize
		,SourceStargazersCount
		,SourceUpdatedAt
		,SourceWatchers
		,SourceWatchersCount
		,StargazersCount
		,SubscribersCount
		,UpdatedAt
		,Watchers
		,WatchersCount
		,EtlSourceId
        ,EtlIngestDate
FROM @RepoDeDupe
WHERE RowNumber == 1;


////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process RepoLabel
//  2

@NewRepoLabel =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetString(Data, "color") AS Color
		,GHInsights.USql.Utility.GetString(Data, "name") AS Name
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "repo_labels"
AND   IngestDate == @IngestDatePartition;

@RepoLabel =
    SELECT *
    FROM dbo.RepoLabel
        UNION ALL
    SELECT *
    FROM @NewRepoLabel;

@RepoLabelDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY Repo, Owner, Name ORDER BY EtlSourceId DESC) AS RowNumber
FROM @RepoLabel;

TRUNCATE TABLE dbo.RepoLabel;

INSERT dbo.RepoLabel
SELECT   Repo
		,Owner
		,Color
		,Name
		,EtlSourceId
        ,EtlIngestDate
FROM @RepoLabelDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process User
//  2

@NewUser =
SELECT	 GHInsights.USql.Utility.GetString(Data, "login") AS Login
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS UserId
		,GHInsights.USql.Utility.GetString(Data, "bio") AS Bio
        ,GHInsights.USql.Utility.GetPiiString(Data, "blog") AS Blog
		,GHInsights.USql.Utility.GetPiiString(Data, "company") AS Company
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
        ,GHInsights.USql.Utility.GetPiiString(Data, "email") AS Email
		,GHInsights.USql.Utility.GetInteger(Data, "followers") AS Followers
		,GHInsights.USql.Utility.GetInteger(Data, "following") AS Following
		,GHInsights.USql.Utility.GetBoolean(Data, "hireable") AS Hireable
		,GHInsights.USql.Utility.GetString(Data, "location") AS Location
        ,GHInsights.USql.Utility.GetPiiString(Data, "name") AS Name
		,GHInsights.USql.Utility.GetInteger(Data, "public_gists") AS PublicGists
		,GHInsights.USql.Utility.GetInteger(Data, "public_repos") AS PublicRepos
		,GHInsights.USql.Utility.GetBoolean(Data, "site_admin") AS SiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "type") AS Type
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "users"
AND   IngestDate == @IngestDatePartition;

@User =
    SELECT *
    FROM dbo.User
        UNION ALL
    SELECT *
    FROM @NewUser;

@UserDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY UserId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @User;

TRUNCATE TABLE dbo.User;

INSERT dbo.User
SELECT   Login
		,UserId
		,Bio
		,Blog
		,Company
		,CreatedAt
		,Email
		,Followers
		,Following
		,Hireable
		,Location
		,Name
		,PublicGists
		,PublicRepos
		,SiteAdmin
		,Type
		,UpdatedAt
		,EtlSourceId
        ,EtlIngestDate
FROM @UserDeDupe
WHERE RowNumber == 1;

////////////////////////////////////////////////////////////////////////////////////////////
//
//  Process Watcher
//  2


@NewWatcher =
SELECT	 GHInsights.USql.Utility.GetString(Data, "repo") AS Repo
		,GHInsights.USql.Utility.GetString(Data, "owner") AS Owner
		,GHInsights.USql.Utility.GetString(Data, "login") AS Login
		,GHInsights.USql.Utility.GetInteger(Data, "id") AS WatcherId
		,GHInsights.USql.Utility.GetString(Data, "bio") AS Bio
		,GHInsights.USql.Utility.GetPiiString(Data, "blog") AS Blog
		,GHInsights.USql.Utility.GetPiiString(Data, "company") AS Company
		,GHInsights.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GHInsights.USql.Utility.GetPiiString(Data, "email") AS Email
		,GHInsights.USql.Utility.GetInteger(Data, "followers") AS Followers
		,GHInsights.USql.Utility.GetInteger(Data, "following") AS Following
		,GHInsights.USql.Utility.GetBoolean(Data, "hireable") AS Hireable
		,GHInsights.USql.Utility.GetPiiString(Data, "location") AS Location
		,GHInsights.USql.Utility.GetPiiString(Data, "name") AS Name
		,GHInsights.USql.Utility.GetInteger(Data, "public_gists") AS PublicGists
		,GHInsights.USql.Utility.GetInteger(Data, "public_repos") AS PublicRepos
		,GHInsights.USql.Utility.GetBoolean(Data, "site_admin") AS SiteAdmin
		,GHInsights.USql.Utility.GetString(Data, "type") AS Type
		,GHInsights.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GHInsights.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "watchers"
AND   IngestDate == @IngestDatePartition;

@Watcher =
    SELECT *
    FROM dbo.Watcher
        UNION ALL
    SELECT *
    FROM @NewWatcher;

@WatcherDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY WatcherId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Watcher;

TRUNCATE TABLE dbo.Watcher;

INSERT dbo.Watcher
SELECT   Repo
	    ,Owner
	    ,Login
	    ,WatcherId
	    ,Bio
	    ,Blog
	    ,Company
	    ,CreatedAt
	    ,Email
	    ,Followers
	    ,Following
	    ,Hireable
	    ,Location
	    ,Name
	    ,PublicGists
	    ,PublicRepos
	    ,SiteAdmin
	    ,Type
	    ,UpdatedAt
	    ,EtlSourceId
        ,EtlIngestDate
FROM @WatcherDeDupe
WHERE RowNumber == 1;


END;
