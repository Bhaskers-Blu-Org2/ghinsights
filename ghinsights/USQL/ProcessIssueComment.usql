
REFERENCE ASSEMBLY [GitHubAnalytics.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];




@IssueComment =
SELECT	 GitHubAnalytics.USql.Utility.GetString(Data, "repo") AS Repo
		,GitHubAnalytics.USql.Utility.GetString(Data, "owner") AS Owner
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "issue_id") AS IssueId
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "id") AS IssueCommentId
		,GitHubAnalytics.USql.Utility.GetRawBytes(Data, "body") AS Body
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "user.id") AS UserId
		,GitHubAnalytics.USql.Utility.GetString(Data, "user.login") AS UserLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "user.site_admin") AS UserSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "user.type") AS UserType
		,GitHubAnalytics.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "issue_comments";

@IssueCommentDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY IssueCommentId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @IssueComment;

DROP TABLE IF EXISTS dbo.IssueComment;

CREATE TABLE dbo.IssueComment
(
    INDEX IX_IssueComment
    CLUSTERED(Repo, Owner, IssueId, IssueCommentId)
    PARTITIONED BY
    HASH(Repo, Owner, IssueId, IssueCommentId)
    INTO 20
)
AS
SELECT   Repo
		,Owner
		,IssueId
		,IssueCommentId
		,Body
		,CreatedAt
		,UpdatedAt
		,UserId
		,UserLogin
		,UserSiteAdmin
		,UserType
		,EtlSourceId
        ,EtlIngestDate
FROM @IssueCommentDeDupe
WHERE RowNumber == 1;