
REFERENCE ASSEMBLY [GitHubAnalytics.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];



@Fork =
SELECT	 GitHubAnalytics.USql.Utility.GetString(Data, "repo") AS Repo
		,GitHubAnalytics.USql.Utility.GetString(Data, "owner") AS Owner
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "id") AS ForkId
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "created_at") AS CreatedAt
		,GitHubAnalytics.USql.Utility.GetString(Data, "default_branch") AS DefaultBranch
		,GitHubAnalytics.USql.Utility.GetString(Data, "description") AS Description
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "fork") AS Fork
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "forks") AS Forks
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "forks_count") AS ForksCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "full_name") AS FullName
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "has_downloads") AS HasDownloads
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "has_issues") AS HasIssues
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "has_pages") AS HasPages
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "has_wiki") AS HasWiki
		,GitHubAnalytics.USql.Utility.GetString(Data, "language") AS Language
		,GitHubAnalytics.USql.Utility.GetString(Data, "name") AS Name
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "network_count") AS NetworkCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "open_issues") AS OpenIssues
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "open_issues_count") AS OpenIssuesCount
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "parent.created_at") AS ParentCreatedAt
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.default_branch") AS ParentDefaultBranch
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.description") AS ParentDescription
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.fork") AS ParentFork
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.forks") AS ParentForks
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.forks_count") AS ParentForksCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.full_name") AS ParentFullName
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.has_downloads") AS ParentHasDownloads
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.has_issues") AS ParentHasIssues
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.has_pages") AS ParentHasPages
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.has_wiki") AS ParentHasWiki
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.id") AS ParentId
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.language") AS ParentLanguage
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.name") AS ParentName
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.open_issues") AS ParentOpenIssues
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.open_issues_count") AS ParentOpenIssuesCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.owner.id") AS ParentOwnerId
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.owner.login") AS ParentOwnerLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.owner.site_admin") AS ParentOwnerSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "parent.owner.type") AS ParentOwnerType
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "parent.private") AS ParentPrivate
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "parent.pushed_at") AS ParentPushedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.size") AS ParentSize
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.stargazers_count") AS ParentStargazersCount
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "parent.updated_at") AS ParentUpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.watchers") AS ParentWatchers
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "parent.watchers_count") AS ParentWatchersCount
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "permissions.admin") AS PermissionsAdmin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "permissions.pull") AS PermissionsPull
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "permissions.push") AS PermissionsPush
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "private") AS IsPrivate
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "pushed_at") AS PushedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "size") AS Size
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "source.created_at") AS SourceCreatedAt
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.default_branch") AS SourceDefaultBranch
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.description") AS SourceDescription
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.fork") AS SourceFork
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.forks") AS SourceForks
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.forks_count") AS SourceForksCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.full_name") AS SourceFullName
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.has_downloads") AS SourceHasDownloads
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.has_issues") AS SourceHasIssues
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.has_pages") AS SourceHasPages
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.has_wiki") AS SourceHasWiki
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.id") AS SourceId
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.language") AS SourceLanguage
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.name") AS SourceName
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.open_issues") AS SourceOpenIssues
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.open_issues_count") AS SourceOpenIssuesCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.owner.id") AS SourceOwnerId
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.owner.login") AS SourceOwnerLogin
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.owner.site_admin") AS SourceOwnerSiteAdmin
		,GitHubAnalytics.USql.Utility.GetString(Data, "source.owner.type") AS SourceOwnerType
		,GitHubAnalytics.USql.Utility.GetBoolean(Data, "source.private") AS SourcePrivate
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "source.pushed_at") AS SourcePushedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.size") AS SourceSize
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.stargazers_count") AS SourceStargazersCount
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "source.updated_at") AS SourceUpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.watchers") AS SourceWatchers
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "source.watchers_count") AS SourceWatchersCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "stargazers_count") AS StargazersCount
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "subscribers_count") AS SubscribersCount
		,GitHubAnalytics.USql.Utility.GetDateTime(Data, "updated_at") AS UpdatedAt
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "watchers") AS Watchers
		,GitHubAnalytics.USql.Utility.GetInteger(Data, "watchers_count") AS WatchersCount
		,GitHubAnalytics.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "forks";

@ForkDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY ForkId, UpdatedAt ORDER BY EtlSourceId DESC) AS RowNumber
FROM @Fork;

DROP TABLE IF EXISTS dbo.Fork;

CREATE TABLE dbo.Fork
(
    INDEX IX_Fork
    CLUSTERED(Repo, Owner, ForkId)
    PARTITIONED BY
    HASH(Repo, Owner, ForkId)
    INTO 20
)
AS
SELECT   Repo
		,Owner
		,ForkId
		,CreatedAt
		,DefaultBranch
		,Description
		,Fork
		,Forks
		,ForksCount
		,FullName
		,HasDownloads
		,HasIssues
		,HasPages
		,HasWiki
		,Language
		,Name
		,NetworkCount
		,OpenIssues
		,OpenIssuesCount
		,ParentCreatedAt
		,ParentDefaultBranch
		,ParentDescription
		,ParentFork
		,ParentForks
		,ParentForksCount
		,ParentFullName
		,ParentHasDownloads
		,ParentHasIssues
		,ParentHasPages
		,ParentHasWiki
		,ParentId
		,ParentLanguage
		,ParentName
		,ParentOpenIssues
		,ParentOpenIssuesCount
		,ParentOwnerId
		,ParentOwnerLogin
		,ParentOwnerSiteAdmin
		,ParentOwnerType
		,ParentPrivate
		,ParentPushedAt
		,ParentSize
		,ParentStargazersCount
		,ParentUpdatedAt
		,ParentWatchers
		,ParentWatchersCount
		,PermissionsAdmin
		,PermissionsPull
		,PermissionsPush
		,IsPrivate
		,PushedAt
		,Size
		,SourceCreatedAt
		,SourceDefaultBranch
		,SourceDescription
		,SourceFork
		,SourceForks
		,SourceForksCount
		,SourceFullName
		,SourceHasDownloads
		,SourceHasIssues
		,SourceHasPages
		,SourceHasWiki
		,SourceId
		,SourceLanguage
		,SourceName
		,SourceOpenIssues
		,SourceOpenIssuesCount
		,SourceOwnerId
		,SourceOwnerLogin
		,SourceOwnerSiteAdmin
		,SourceOwnerType
		,SourcePrivate
		,SourcePushedAt
		,SourceSize
		,SourceStargazersCount
		,SourceUpdatedAt
		,SourceWatchers
		,SourceWatchersCount
		,StargazersCount
		,SubscribersCount
		,UpdatedAt
		,Watchers
		,WatchersCount
		,EtlSourceId
        ,EtlIngestDate
FROM @ForkDeDupe
WHERE RowNumber == 1;