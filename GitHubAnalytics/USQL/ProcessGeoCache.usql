
REFERENCE ASSEMBLY [GitHubAnalytics.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];



@GeoCache =
SELECT	 GitHubAnalytics.USql.Utility.GetString(Data, "key") AS Key
		,GitHubAnalytics.USql.Utility.GetString(Data, "city") AS City
		,GitHubAnalytics.USql.Utility.GetString(Data, "country") AS Country
		,GitHubAnalytics.USql.Utility.GetString(Data, "country_code") AS CountryCode
		,GitHubAnalytics.USql.Utility.GetString(Data, "lat") AS Latitude
		,GitHubAnalytics.USql.Utility.GetString(Data, "long") AS Longitude
		,GitHubAnalytics.USql.Utility.GetString(Data, "state") AS State
		,GitHubAnalytics.USql.Utility.GetString(Data, "status") AS Status
		,GitHubAnalytics.USql.Utility.GetString(Data, "_id") AS EtlSourceId
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHTorrent.GitHubData AS e
WHERE EventName == "geo_cache";

@GeoCacheDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY Key ORDER BY EtlSourceId) AS RowNumber
FROM @GeoCache;

DROP TABLE IF EXISTS dbo.GeoCache;

CREATE TABLE dbo.GeoCache
(
    INDEX IX_GeoCache
    CLUSTERED(Key)
    PARTITIONED BY
    HASH(Key)
    INTO 20
)
AS
SELECT   Key
		,City
		,Country
		,CountryCode
		,Latitude
		,Longitude
		,State
		,Status
		,EtlSourceId
        ,EtlIngestDate
FROM @GeoCacheDeDupe
WHERE RowNumber == 1;
